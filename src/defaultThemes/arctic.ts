// This file was automatically generated by .attheme default theme
// generator, available at:
//     https://gitlab.com/snejugal/attheme-default-theme-generator

import Attheme from "..";
import { Color } from "../types";
import { PartialHsbColor, hsbToRgb } from "@snejugal/color";

/**
 * Generates the Arctic theme.
 */
const arctic = (accent: PartialHsbColor) =>
  new Attheme([
    [
      `actionBarActionModeDefault`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.9039225592917 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.40850549919655077),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11178361080279185 + 0.06155627214201213,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultSelector`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultTop`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `actionBarBrowser`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefault`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchived`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.5003134034216 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318698708808589),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.040856849071554326 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSearch`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSearchPlaceholder`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.3393675659352 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9733106951863988),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.040856849071554326 + 0),
          ),
        }),
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.7637865871493 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.744273411624128),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.05185667830480367 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.9805635723103 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.250053952367061),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.10679650493612051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearch`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchArchivedPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchPlaceholder`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.3393675659352 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9733106951863988),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.040856849071554326 + 0),
          ),
        }),
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItem`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.8548388175986 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45348702098364857),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12648782112294288 + 0.05181204733347949,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubtitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.7301762656137 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595940756832634),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.31128502803127367 + 0.051899670987623006,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultTitle`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabActiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.8235511172586 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6865291073498336),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.6034458350188 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.698607899990859),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.06741560231311 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.3393675659352 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9733106951863988),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.040856849071554326 + 0),
          ),
        }),
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabUnactiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.7301762656137 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595940756832634),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.31128502803127367 + 0.051899670987623006,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarWhiteSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.3781486454016 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9863064297830179),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.09683198927879087 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconCyan`,
      {
        red: 129,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconGreen`,
      {
        red: 129,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconOrange`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconPink`,
      {
        red: 123,
        green: 123,
        blue: 129,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconRed`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconViolet`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.4283990654599 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9646250679658338),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.0625227590553747 + 0),
          ),
        }),
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorCyan`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorGreen`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorOrange`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorPink`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorRed`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorViolet`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarBlue`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarCyan`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarGreen`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarOrange`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarPink`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarRed`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarViolet`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.5375235766846 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7126353939165829),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6119996867690407 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchivedHidden`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 10.4616065979013 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.3967857487498687),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0970959681474812 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundBlue`,
      {
        red: 80,
        green: 165,
        blue: 230,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundCyan`,
      {
        red: 95,
        green: 190,
        blue: 213,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGreen`,
      {
        red: 118,
        green: 200,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGroupCreateSpanBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.6938332234153 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4154463171733377),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6651808213115126 + 0.3504941623629212,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.5679829308471 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.669720887701442),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.962624126225921 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundOrange`,
      {
        red: 242,
        green: 140,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundPink`,
      {
        red: 242,
        green: 116,
        blue: 154,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundRed`,
      {
        red: 229,
        green: 101,
        blue: 85,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundSaved`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.7076213981557 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6180223784110668),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundViolet`,
      {
        red: 142,
        green: 133,
        blue: 238,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageBlue`,
      {
        red: 50,
        green: 138,
        blue: 229,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageCyan`,
      {
        red: 55,
        green: 158,
        blue: 184,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageGreen`,
      {
        red: 80,
        green: 178,
        blue: 50,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageOrange`,
      {
        red: 216,
        green: 123,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessagePink`,
      {
        red: 203,
        green: 79,
        blue: 134,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageRed`,
      {
        red: 202,
        green: 86,
        blue: 80,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageViolet`,
      {
        red: 131,
        green: 111,
        blue: 230,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileBlue`,
      {
        red: 141,
        green: 141,
        blue: 141,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileCyan`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileGreen`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileOrange`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfilePink`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileRed`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileViolet`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_text`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedGreenIcon`,
      {
        red: 47,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedRedIcon`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.1099277093165 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3939661054375316),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3786587489351355 + 0.22838960641523826,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.0120147350153 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5122797744597043),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9442469612036967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_TextSelectionCursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.3008998363549 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.523288149816645),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0094739375713708 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_addContact`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.9751639330219 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7375578349476317),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 10.2945514114615 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3038028441853708),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6778071238933113 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.5684072820587 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3266886340499568),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.33584989413900274 + 0.30455323362463954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachActiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.6635432164494 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6827592252163717),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioBackground`,
      {
        red: 235,
        green: 96,
        blue: 96,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioText`,
      {
        red: 222,
        green: 71,
        blue: 71,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.4741388050243 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6612297184743583),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.06741560231311 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactBackground`,
      {
        red: 242,
        green: 192,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactText`,
      {
        red: 223,
        green: 160,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachEmptyImage`,
      {
        red: 204,
        green: 204,
        blue: 204,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileBackground`,
      {
        red: 52,
        green: 185,
        blue: 241,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.741256370895 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.758582961448161),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.890350578101656 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryBackground`,
      {
        red: 69,
        green: 157,
        blue: 245,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 20.5424540932621 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.690349026053105),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9351357817647913 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationBackground`,
      {
        red: 54,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationText`,
      {
        red: 60,
        green: 171,
        blue: 47,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanBackground`,
      {
        red: 70,
        green: 70,
        blue: 70,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionImage`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionMark`,
      {
        red: 255,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1786285627134 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5100137232000173),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17086557798258967 + 0.045731183984649204,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPhotoBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollBackground`,
      {
        red: 242,
        green: 192,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollText`,
      {
        red: 223,
        green: 168,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachSendBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.7227422539291 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6389430712241158),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0970959681474812 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachUnactiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.4923522930485 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4434945588098028),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.26103323791641536 + 0.11445864437029986,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botButtonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.9601964605693 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13331518589556687),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18700170087535414 + 0.6518994388390688,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackgroundPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.6089184271721 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.23063287480005207),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.26138731906375073 + 0.4306105020717712,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.8046094809936 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4703190041687004),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.08972959856125617 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botSwitchToInlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_editDoneIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.9872936851046 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.761148253449637),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiBottomPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.1989454036816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.424729795654671),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22626629371316254 + 0.1123079142928812,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.950447720435 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1272232181730768),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1999742928631558 + 0.7388476283074346,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackspace`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.1989454036816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.424729795654671),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22626629371316254 + 0.1123079142928812,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.3692383719814 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6041474946554355),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0285783496149892 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelEmptyText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.2516952653993 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4706786524965336),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2887702598023645 + 0.10477523475166896,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.5796108749448 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4790072561227429),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.33580165957821334 + 0.11463368717289378,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.5065443668098 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6952606722020094),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8727945867117156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.8081514976633 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.36234980958227),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelNewTrending`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.0519515132863 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6739803132932294),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 18,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.9618970630435 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13438768135781423),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1848639254838643 + 0.6380183918217531,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelectorLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.5337058273886 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.486395195179856),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.9886369936878 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6853527716692052),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.3398547687576434 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.4465344474571 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.61750805229329),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.0639064005396 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.35000001943883574),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30298986421836277 + 0.23887105290217925,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingDescription`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingTitle`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.4643127443741 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.23264241255041024),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.342405982537556 + 0.55663129352405,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.4763850299138 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8607220183258569),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.49197460768094864 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_fieldOverlayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.9410972824935 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.76403496037218),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintBackground`,
      {
        red: 17,
        green: 17,
        blue: 17,
        alpha: 204,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButton`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounter`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounterBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.4698724442583 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6768078988861053),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9534097149988047 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.2814286093171 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.48645777658777434),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2744828235107711 + 0.08860279086440973,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.2882940774465 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5899873375682834),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.884981006352425 + 0.10022376914783214,
            ),
          ),
        }),
        alpha: 63,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.4301291608645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1686125807646741),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5771235188389501 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7807848179198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5828481905208861),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45228871743757615 + 0.056676266078523954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.845774199585 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.782757128493649),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.045384126168422245 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.845774199585 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.782757128493649),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.045384126168422245 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.2620084434685 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3052292084266796),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45784381264001944 + 0.47241707513566955,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.2423561032631 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.4998382933826933),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.1522281033198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0489130239762208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSelectedProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1368952440183 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6900852925443691),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioTitleText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.2680850356211 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6953312233536647),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.03392007087091564 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubble`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.180487180905 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6025621239298906),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0372702457787248 + 0.09615681410516419,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.8001179003131 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.388289684005002),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.09926982569193686 + 0),
          ),
        }),
        alpha: 118,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.1290668250518 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.684605169148312),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.06741560231311 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactNameText`,
      {
        red: 50,
        green: 50,
        blue: 50,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.4301291608645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1686125807646741),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5771235188389501 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7807848179198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5828481905208861),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45228871743757615 + 0.056676266078523954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inDownCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.2092087660648 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4079973441332229),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6836896029082361 + 0.3777006506860932,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.9242194639939 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9009815565443009),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1171471460771598 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.9375699924668 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0226606572287367),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6554353691817173 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.4301291608645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1686125807646741),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5771235188389501 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7807848179198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5828481905208861),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45228871743757615 + 0.056676266078523954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileNameText`,
      {
        red: 41,
        green: 41,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgressSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9718332078276 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9798057607081174),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0576275326118212 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0549055184217 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.575756936565372),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6407636658905027 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inGreenCall`,
      {
        red: 47,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.0015309818665 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7245817002812927),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.2306251650786 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.58794137113855),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0576275326118212 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.0140077953643 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0423435844529372),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6628439697847712 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIcon`,
      {
        red: 252,
        green: 252,
        blue: 252,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.1673558253373 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2509884266144648),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.39451315451541724 + 0.5693328608572901,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.9375699924668 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0226606572287367),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6554353691817173 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.9851697532014 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6748670105406207),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.1673558253373 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2509884266144648),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.39451315451541724 + 0.5693328608572901,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.9375699924668 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0226606572287367),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6554353691817173 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.180487180905 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6025621239298906),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0372702457787248 + 0.09615681410516419,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.524079153711 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4514823490937952),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.43394022763529383 + 0.1802191435752317,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.650299508488 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1362286339936385),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.700618094666232 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.6398883302978 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.753107531640511),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8382927516957447 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.4393537814982 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.640092235518816),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0382089873014322 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.5482795664656 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.603099990602074),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9351357817647913 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.4301291608645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1686125807646741),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5771235188389501 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7807848179198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5828481905208861),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45228871743757615 + 0.056676266078523954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMessageText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.8036002308561 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5943330733296236),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5647653420901645 + 0.05989345235157036,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.5579706743462 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.71511428004195),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7963024378633768 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSiteNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTextSelectionHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.7437604275189 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.741007399855515),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 40,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.4301291608645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1686125807646741),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5771235188389501 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7807848179198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5828481905208861),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45228871743757615 + 0.056676266078523954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inUpCall`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.4301291608645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1686125807646741),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5771235188389501 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7807848179198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5828481905208861),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45228871743757615 + 0.056676266078523954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7807848179198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5828481905208861),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45228871743757615 + 0.056676266078523954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9830444165897 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1721844176392213),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6778071238933113 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.4520963117033 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4125290963843863),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.4978813009694967 + 0.2672644970042335,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.6929175698906 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.660473655094144),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9905781322661754 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.3869835054498 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.130207838230386),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inlineResultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.7534128017007 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6789940676998216),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_linkSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.3342332227946 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5881130659956253),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9442469612036967 + 0),
          ),
        }),
        alpha: 34,
      } as Color,
    ] as [string, Color],
    [
      `chat_lockIcon`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaBroadcast`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaInfoText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhoto`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIconSelected`,
      {
        red: 217,
        green: 217,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoSelected`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 127,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaMenu`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentClock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaViews`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkIn`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.8944711646552 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7826357334534157),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkOut`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1534598435855 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5809603312669264),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.000084209858251 + 0.1285595030996105,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCancelInlineBot`,
      {
        red: 173,
        green: 173,
        blue: 173,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.8315663434557 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.4352956229450036),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8129475674306171 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.5993449740369 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.49122375145895175),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.38118838513282205 + 0.11863075781299473,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.2814286093171 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.48645777658777434),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2744828235107711 + 0.08860279086440973,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelPressedSend`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelSend`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.8076151350749 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6648438247406427),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 229,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVideoFrame`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.5010715623121 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5731055371357807),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.06741560231311 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.5996848738032 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7064398270019274),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.917067812644992 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDelete`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDuration`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoicePressed`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextIn`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextOut`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_muteIcon`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioCacheSeekbar`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 43,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.520980259065 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.4029828335040544),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8382927516957447 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.1609621032936 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.7079858242455261),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 88,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarFill`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.1609621032936 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.7079858242455261),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 88,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSelectedProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.520980259065 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.4029828335040544),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8382927516957447 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioTitleText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBroadcast`,
      {
        red: 70,
        green: 170,
        blue: 54,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubble`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 20.3302299900013 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6686194810397734),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9534097149988047 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.3348551732714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.656725994774149),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8640929869701666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.8220869360761 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7183336069541437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.19674956393862889 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.3348551732714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.656725994774149),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8640929869701666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.6326208376178 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.0088718633656155),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 80,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.6326208376178 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.0088718633656155),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 80,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.3056427679735 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0226606572287367),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6554353691817173 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.3348551732714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.656725994774149),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8640929869701666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgressSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.3348551732714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.656725994774149),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8640929869701666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0549055184217 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.575756936565372),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6407636658905027 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outForwardedNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outGreenCall`,
      {
        red: 47,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstant`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstantSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoader`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.0140077953643 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0423435844529372),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6628439697847712 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.1673558253373 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2509884266144648),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.39451315451541724 + 0.5693328608572901,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.3056427679735 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0226606572287367),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6554353691817173 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.2916247302359 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.81255750833999),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 80,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 228,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.3348551732714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.656725994774149),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8640929869701666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.3348551732714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.656725994774149),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8640929869701666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenu`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 144,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenuSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 144,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 200,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckRead`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 199,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckReadSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 184,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 184,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 112,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClockSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 112,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSiteNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTextSelectionHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.7023992260113 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.220153768934926),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 107,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outUpCall`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.6496733586703 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.465521312472585),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 192,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.9604793700764 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.486192388381087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7555653670806509 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViaBotNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViews`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 180,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViewsSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 180,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbar`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 112,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarFill`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 112,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewDurationText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewGameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordTime`,
      {
        red: 77,
        green: 76,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordVoiceCancel`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.7209788326165 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.622272171293061),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9534097149988047 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceDot`,
      {
        red: 243,
        green: 70,
        blue: 70,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPause`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPausePressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 10.192633599683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.781457833236254),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1070950769653471 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.1614642885294 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.7122235831607981),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0772563111183135 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgressInner`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.2814286093171 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.48645777658777434),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2744828235107711 + 0.08860279086440973,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 20.34373417147 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5705046904759357),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9442469612036967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelLine`,
      {
        red: 232,
        green: 232,
        blue: 232,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelMessage`,
      {
        red: 52,
        green: 52,
        blue: 52,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_reportSpam`,
      {
        red: 245,
        green: 64,
        blue: 76,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.9039225592917 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.40850549919655077),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11178361080279185 + 0.06155627214201213,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.9039225592917 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.40850549919655077),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11178361080279185 + 0.06155627214201213,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretChatStatusText`,
      {
        red: 127,
        green: 127,
        blue: 127,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimeText`,
      {
        red: 228,
        green: 226,
        blue: 224,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 82,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_selectedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.6231393591701 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7655551927121733),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 45,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentError`,
      {
        red: 255,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.8085949440931 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.986222973912547),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.35515331712545956 + 0),
          ),
        }),
        alpha: 85,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.8085949440931 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.986222973912547),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.35515331712545956 + 0),
          ),
        }),
        alpha: 117,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceLink`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.7879335525264 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.5553148847831169),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.43761808660298196 + 0),
          ),
        }),
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.7879335525264 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.5553148847831169),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.43761808660298196 + 0),
          ),
        }),
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `chat_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.145221263126 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7792388923494196),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8727945867117156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerViaBotNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickersHintPanel`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_textSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.9650275973855 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6446046576626676),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 61,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.0221855526822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.524552405760385),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2917924213754808 + 0.06888488749495654,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.786721621929 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.606708183322415),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 234,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6719701667465 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3816549701610212),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1643523445925909 + 0.1069470556887395,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 239,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartArrowIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.9375699924668 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0226606572287367),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6554353691817173 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.3704997158405 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.724543313953717),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8640929869701666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_wallpaper`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.2357960068943 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6509376730949521),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0043105962413408 + 0.021146122346622918,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.7893086946294 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5391237441070915),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.4641470985633 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6331564236953473),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7555653670806509 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 20.8792853142281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6543827479124276),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7880551116809474 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.4285816761615 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.619122464909805),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0576275326118212 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.0351999335454 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7003480117583383),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.9088663990101 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5150248821931407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0285783496149892 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePinBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.6576582440361 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.566709012698929),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6087055095466831 + 0.09355442538094691,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.047011554891 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18032650140725462),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18744006241012554 + 0.44049823165058394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackgroundActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.9053971658959 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.2874912516622805),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8554422046883868 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_attachMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.4641470985633 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6331564236953473),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7555653670806509 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_date`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.9008334243644 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2671698647696589),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15289944396182242 + 0.19921998833406823,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_draft`,
      {
        red: 227,
        green: 34,
        blue: 70,
        alpha: 250,
      } as Color,
    ] as [string, Color],
    [
      `chats_mentionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloud`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloudBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.7453096603654 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.557418350011275),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7238707112635994 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.942159980875 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.2173394839567777),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5635062868786218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.0511185656865 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6009724982346155),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3248319405287782 + 0.030940841133401113,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemText`,
      {
        red: 68,
        green: 68,
        blue: 68,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuName`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhone`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 195,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhoneCats`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.8384390584436 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.397777126895971),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7160706181440424 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.281211671956 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6803156264975403),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.26480233582431884 + 0),
          ),
        }),
        alpha: 41,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopShadowCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.25936556715 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.713570560141363),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chats_message`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.0249477651941 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16716102853091502),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07904017890933127 + 0.2058042990632031,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_messageArchived`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_message_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0681482420387 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.12437360691518344),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06062237608842132 + 0.23032439521883838,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.8170417669982 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.21749634668974002),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20667602755713838 + 0.3719207067720852,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_name`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameArchived`,
      {
        red: 82,
        green: 82,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameIcon`,
      {
        red: 36,
        green: 36,
        blue: 36,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.4641470985633 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6331564236953473),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7555653670806509 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived_threeLines`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.3276519395098 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5074550768673942),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05820107863421329 + 0.015911432420015796,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_onlineCircle`,
      {
        red: 75,
        green: 203,
        blue: 28,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedIcon`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedOverlay`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 6,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretIcon`,
      {
        red: 25,
        green: 177,
        blue: 38,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretName`,
      {
        red: 0,
        green: 166,
        blue: 14,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.5078171538412 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7137469199190463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0576275326118212 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.4679630195108 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.706947307107011),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 123,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentError`,
      {
        red: 255,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentReadCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.5078171538412 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7137469199190463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0576275326118212 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabUnreadActiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.6034458350188 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.698607899990859),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.06741560231311 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabUnreadUnactiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.6034458350188 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.698607899990859),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.06741560231311 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabletSelectedOverlay`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.4390372740257 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7743670937592717),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterMuted`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.047011554891 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18032650140725462),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18744006241012554 + 0.44049823165058394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.9724484842782 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6623483241253485),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0772563111183135 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkbox`,
      {
        red: 94,
        green: 194,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7034382073542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5434752750040605),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5047133817480228 + 0.09968884353724977,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.7570845292956 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.571944465879911),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8468421547180058 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareDisabled`,
      {
        red: 176,
        green: 176,
        blue: 176,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareUnchecked`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteBackground`,
      {
        red: 85,
        green: 190,
        blue: 97,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.2644237596342 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.209990337384558),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0576275326118212 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 10.4458454688404 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.135295528802028),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0576275326118212 + 0),
          ),
        }),
        alpha: 206,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner3`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.0416611127278 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.17713994130456537),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19233962295799195 + 0.46315871318145857,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.31979751144 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7240855029542947),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.5004946774071 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6180223784110668),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter3`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.31979751144 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7240855029542947),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackgroundGray`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.1572479847154 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.701679473400338),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.98120825228106 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.9413815480949 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.706844801539922),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.962624126225921 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButtonSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `dialogCameraIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.9129647727778 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7267874687115015),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9905781322661754 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareDisabled`,
      {
        red: 176,
        green: 176,
        blue: 176,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareUnchecked`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.287007323345 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.591589741461246),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.4191149790267 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6970228450103346),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogGrayLine`,
      {
        red: 210,
        green: 210,
        blue: 210,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.8548388175986 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45348702098364857),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12648782112294288 + 0.05181204733347949,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputField`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.9330813515541 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.661634515245758),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.5078810582757 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7279595316776364),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.917067812644992 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.2867819633584 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9831929328050117),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1070950769653471 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.248344811845 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.3410672957575795),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8815470888479302 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `dialogProgressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.3693968553907 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5918466281954182),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.962624126225921 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackground`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.0015309818665 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7245817002812927),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRedIcon`,
      {
        red: 225,
        green: 77,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.4191149790267 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6970228450103346),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogScrollGlow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.8347901610123 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05091499171069198),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08152118481545294 + 0.8590759784091098,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1372161403959 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07675041495727922),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12063922119275304 + 0.8079776011603035,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.6578007056825 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5218339207912502),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.34713035774344997 + 0.08395145397369116,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.5614748570538 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4694142078630923),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3464098061299622 + 0.12684038178422763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchText`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 18,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlack`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.7416315392174 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7269608889080406),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7717105019707241 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.9426603128234 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7326637598837644),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8129475674306171 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.3296442797013 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.742114632289059),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9442469612036967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.9732638042127 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7643462879466023),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.4706596801759 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6608865655786205),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8297939100419609 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray2`,
      {
        red: 117,
        green: 117,
        blue: 117,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray3`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray4`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextHint`,
      {
        red: 151,
        green: 151,
        blue: 151,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextLink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.6421205352147 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.721693606666998),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9534097149988047 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed`,
      {
        red: 230,
        green: 85,
        blue: 94,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed2`,
      {
        red: 235,
        green: 85,
        blue: 93,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTopBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.2563419735971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.218940990657139),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.8456158306834 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6045986211514355),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19547934066125877 + 0.017486502365796512,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.950447720435 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1272232181730768),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1999742928631558 + 0.7388476283074346,
            ),
          ),
        }),
        alpha: 246,
      } as Color,
    ] as [string, Color],
    [
      `dialog_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.7971440267295 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6572016294698737),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `divider`,
      {
        red: 230,
        green: 230,
        blue: 230,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `emptyListPlaceholder`,
      {
        red: 149,
        green: 149,
        blue: 149,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.0124279966177 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.606306040451214),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.98120825228106 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollInactive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.1375321976162 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.23365610961675753),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.25645632328581663 + 0.4141292663721552,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.8640707459717 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.514888095888608),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9534097149988047 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.3382330650508 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.564857937297372),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7717105019707241 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.9113368190444 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.688091658615409),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButton`,
      {
        red: 217,
        green: 87,
        blue: 87,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButtonPressed`,
      {
        red: 198,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_unread`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.1381708987093 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5326003743718943),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9442469612036967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIcon`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIconBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_iconText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `graySection`,
      {
        red: 248,
        green: 248,
        blue: 248,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_checkbox`,
      {
        red: 81,
        green: 208,
        blue: 76,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_cursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.5773296140954 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6788401325001203),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_hintText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.7807848179198 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5828481905208861),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45228871743757615 + 0.056676266078523954,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.6287048818257 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5047808746176285),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21393575386779398 + 0.05978474516643292,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanBackground`,
      {
        red: 242,
        green: 242,
        blue: 242,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanDelete`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.0221855526822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.524552405760385),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2917924213754808 + 0.06888488749495654,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPerformer`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.845774199585 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.782757128493649),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.045384126168422245 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPlayPause`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.1447660408477 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.744102569796292),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.845774199585 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.782757128493649),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.045384126168422245 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_changephoneinfo_changeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.161854085035 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6544281779713965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9442469612036967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLock`,
      {
        red: 164,
        green: 164,
        blue: 164,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_graySectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.5834574290372 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6182799417443661),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3105395011997446 + 0.021176739259683004,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_player_progressCachedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.2519716049726 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29953239142802296),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.47081640462782104 + 0.5028447176213395,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_other`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.211853970833 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.287712619270966),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.32262685500846733 + 0.37027920419492794,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_scrollUp`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.3365310885266 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18631439440420267),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.258811959772463 + 0.5814320258681256,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `listSelector`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 78,
      } as Color,
    ] as [string, Color],
    [
      `listSelectorSDK21`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `location_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.8580402855858 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6777329203957216),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `location_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.7971440267295 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6572016294698737),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_placeLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.2274695905463 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5391696739802936),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9442469612036967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationBackground`,
      {
        red: 255,
        green: 100,
        blue: 100,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.7893086946294 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5391237441070915),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressInner`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 7.7080643807707 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.42317178539242395),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6468180910317245 + 0.3243071012539872,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressOuter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.6932095464158 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.244655040977396),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7238707112635994 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.0272406594337 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6165351146480327),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkbox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.6433800580986 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6306654465161072),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.7926738741058 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.591758991298242),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9905781322661754 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.6491979403963 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.582210754324754),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8129475674306171 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badge`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.5753086737295 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6771333732000513),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.06741560231311 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_disabledButton`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_enabledButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.1396318226745 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7218308469485653),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0478920212561995 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBar`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarItems`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSubtitle`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.845774199585 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.782757128493649),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.045384126168422245 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTop`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `player_background`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_button`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_buttonActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.5679626380651 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7129411075407326),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholder`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholderBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.2341409254875 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7364763468461946),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.2519716049726 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29953239142802296),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.47081640462782104 + 0.5028447176213395,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_time`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.871820385092 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6520880195007298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.487348636185416 + 0.009494059016400302,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.4285816761615 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.619122464909805),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0576275326118212 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.0351999335454 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7003480117583383),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_creatorIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.878772522753 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7679390695047688),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.7718537722463 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.747343819718372),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.908110855801182 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_title`,
      {
        red: 54,
        green: 54,
        blue: 54,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.1798989387312 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.600564053322442),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0382089873014322 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `progressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.9409563525683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6440732434275227),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackground`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.6372451389939 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7434757089562782),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.8309981406634 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7039755999176194),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0094739375713708 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sessions_devicesImage`,
      {
        red: 150,
        green: 150,
        blue: 150,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_actionMode`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholder`,
      {
        red: 244,
        green: 244,
        blue: 244,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholderText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.3577390254978 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3682486839274912),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3459431339423112 + 0.24428098934027126,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_photoPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.1479282793893 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2491177767827567),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.39886830262720374 + 0.5825501345754432,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_startStopLoadIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.9611372144921 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.663578207729084),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.98120825228106 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartActiveLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_blue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 24.3587622845755 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_golden`,
      {
        red: 227,
        green: 183,
        blue: 39,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_green`,
      {
        red: 97,
        green: 199,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_indigo`,
      {
        red: 127,
        green: 121,
        blue: 243,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightblue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.2128035065107 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.4629119705566493),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightgreen`,
      {
        red: 143,
        green: 207,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_orange`,
      {
        red: 227,
        green: 183,
        blue: 39,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_red`,
      {
        red: 224,
        green: 83,
        blue: 86,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 11.524079153711 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4514823490937952),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.43394022763529383 + 0.1802191435752317,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menuSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `switch2Track`,
      {
        red: 245,
        green: 116,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switch2TrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.7893838689436 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5199992460739673),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchThumbChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.9872936851046 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.761148253449637),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1374104843721051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrack`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.2923812390696 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.32239014685204936),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2725033118682779 + 0.25357042401304286,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.9992542994675 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8329619982210922),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.36557126279677454 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 15.5719098535798 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.7836827877638743),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6853618586306965 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelector`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 78,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelectorChecked`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 78,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumb`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumbChecked`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.8315855614516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.580610026610268),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0772563111183135 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_background`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.4005706724234 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.355558887370916),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.045384126168422245 + 0),
          ),
        }),
        alpha: 234,
      } as Color,
    ] as [string, Color],
    [
      `undo_cancelColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 10.8435032920206 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.1307683693422876),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1476219127013627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_infoColor`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_addressConfirmBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackgroundSelector`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 64,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.5830834654653 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5620217765850892),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.908110855801182 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.7180879304287 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6836785198280193),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7717105019707241 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_commentText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_dateText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayBackground`,
      {
        red: 41,
        green: 41,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_graySettingsBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText`,
      {
        red: 119,
        green: 119,
        blue: 119,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText2`,
      {
        red: 102,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_greenText`,
      {
        red: 55,
        green: 168,
        blue: 24,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_pullBackground`,
      {
        red: 33,
        green: 33,
        blue: 33,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_redText`,
      {
        red: 219,
        green: 64,
        blue: 64,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_releaseBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.6733879451407 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6181134814326725),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5702911942761729 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_statusText`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundCheckText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.0341823106577 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.401327186619368),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7963024378633768 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGray`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGrayShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.913688431751 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6489364269325597),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.4911412466365421 + 0.011692840639529193,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhite`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlackText`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.3763872102389 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.736245604945782),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0772563111183135 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueHeader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.6985665064664 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.697427566792545),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9718902777609273 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 19.8865737395972 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6020569445084387),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0772563111183135 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.686598692826 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.734635315105787),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9905781322661754 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.8871653647176 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.606670774196414),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7636130439418932 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.7561916490316 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.661736911342445),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8045998942186627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.4465344474571 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.61750805229329),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9260760934050695 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText5`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 17.9631783239308 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6497826666575026),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0094739375713708 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 16.066196058505 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5949183292459823),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7160706181440424 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText7`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.8200321640151 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.5572516179019913),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8640929869701666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.4632767490421 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.41678933711649335),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18523970738587212 + 0.09677106273554027,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayLine`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.027705822936 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7107357004714758),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.39788517229548015 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText2`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText3`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText4`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText5`,
      {
        red: 163,
        green: 163,
        blue: 163,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText6`,
      {
        red: 117,
        green: 117,
        blue: 117,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText7`,
      {
        red: 198,
        green: 198,
        blue: 198,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText8`,
      {
        red: 109,
        green: 109,
        blue: 114,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText`,
      {
        red: 38,
        green: 151,
        blue: 44,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText2`,
      {
        red: 4,
        green: 172,
        blue: 53,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteHintText`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputField`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 12.9330813515541 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.661634515245758),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 13.248344811845 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.3410672957575795),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8815470888479302 + 0),
          ),
        }),
        alpha: 33,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 21.0123805984614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.670365422317665),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8992051389850919 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText`,
      {
        red: 205,
        green: 90,
        blue: 90,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText2`,
      {
        red: 228,
        green: 69,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText3`,
      {
        red: 210,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText4`,
      {
        red: 207,
        green: 48,
        blue: 48,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText5`,
      {
        red: 237,
        green: 57,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText6`,
      {
        red: 255,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteValueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 18.8940106164132 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 2.6556703807177913),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9534097149988047 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
  ]);

export default arctic;
