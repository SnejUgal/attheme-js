// This file was automatically generated by .attheme default theme
// generator, available at:
//     https://gitlab.com/snejugal/attheme-default-theme-generator

import Attheme from "..";
import { Color } from "../types";
import { PartialHsbColor, hsbToRgb } from "@snejugal/color";

/**
 * Generates the Dark theme.
 */
const dark = (accent: PartialHsbColor) =>
  new Attheme([
    [
      `actionBarActionModeDefault`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.6424186669347 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6469145010653846),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05204165362643928 + 0.0015190242481382052,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3169751786163 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6436528726582692),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21800696199248218 + 0.007451653626256414,
            ),
          ),
        }),
        alpha: 86,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultTop`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.6258615143641 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6835892702318612),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.048814212423671385 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarBrowser`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefault`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1392880460427 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6362509397828044),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07024255988622757 + 0.0032100801813451044,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSearch`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3832092566169 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6599308605010631),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11590437615647645 + 0.0011309327063322033,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearch`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchArchivedPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3832092566169 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6599308605010631),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11590437615647645 + 0.0011309327063322033,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.5448660421266 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6939674783234439),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.06969434704149025 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItem`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.1355818942838 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.37207641696964455),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23468193676059623 + 0.1776281018001317,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubtitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabActiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.5160911310149 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8902238121339014),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0682405542296 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.907584524076572),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.0592486360103 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.773915752628345),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.1507662011374849 + 0),
          ),
        }),
        alpha: 55,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabUnactiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarWhiteSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 47,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconBlue`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2350758941683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7164631487507437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.15686607717768053 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorCyan`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2350758941683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7164631487507437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.15686607717768053 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorGreen`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2350758941683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7164631487507437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.15686607717768053 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorOrange`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2350758941683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7164631487507437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.15686607717768053 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorPink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2350758941683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7164631487507437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.15686607717768053 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorRed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2350758941683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7164631487507437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.15686607717768053 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorViolet`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2350758941683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7164631487507437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.15686607717768053 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarCyan`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarGreen`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarOrange`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarPink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarRed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarViolet`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.5852728123843 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.637820949449397),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10232280907718906 + 0.004423854180694388,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchivedHidden`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.4547379653164 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6385616865137657),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12501577891313664 + 0.005260064184287855,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundBlue`,
      {
        red: 84,
        green: 156,
        blue: 221,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundCyan`,
      {
        red: 95,
        green: 190,
        blue: 213,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGreen`,
      {
        red: 118,
        green: 200,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGroupCreateSpanBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.8812363903033 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9360593976532607),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.2743284178772606 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.153848728716 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.912603389128749),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7563548988728147 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundOrange`,
      {
        red: 242,
        green: 188,
        blue: 100,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundPink`,
      {
        red: 242,
        green: 116,
        blue: 154,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundRed`,
      {
        red: 220,
        green: 128,
        blue: 91,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundSaved`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.3886298059737 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8955711542164049),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundViolet`,
      {
        red: 142,
        green: 133,
        blue: 238,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageBlue`,
      {
        red: 121,
        green: 196,
        blue: 252,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageCyan`,
      {
        red: 93,
        green: 229,
        blue: 221,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageGreen`,
      {
        red: 148,
        green: 231,
        blue: 133,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageOrange`,
      {
        red: 255,
        green: 201,
        blue: 96,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessagePink`,
      {
        red: 246,
        green: 119,
        blue: 155,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageRed`,
      {
        red: 255,
        green: 173,
        blue: 124,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageViolet`,
      {
        red: 154,
        green: 161,
        blue: 251,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileCyan`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileGreen`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileOrange`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfilePink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileRed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileViolet`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_text`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedGreenIcon`,
      {
        red: 72,
        green: 221,
        blue: 118,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedRedIcon`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.4575238103532 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5924983198495728),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10406112556061402 + 0.012452764691830421,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.8382216688597 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9387260828386257),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8606785446473928 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_addContact`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.8539428567075 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4014353069403103),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22142499552995165 + 0.13985620403046328,
            ),
          ),
        }),
        alpha: 217,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachActiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.5160911310149 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8902238121339014),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioBackground`,
      {
        red: 246,
        green: 111,
        blue: 107,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCameraIcon1`,
      {
        red: 255,
        green: 130,
        blue: 85,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3760975988507 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9943819850615297),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9729464270254421 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactBackground`,
      {
        red: 222,
        green: 176,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachEmptyImage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileBackground`,
      {
        red: 90,
        green: 188,
        blue: 244,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryBackground`,
      {
        red: 77,
        green: 150,
        blue: 245,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachHideBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.4009836527188 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7922955945601139),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.09734472465198594 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationBackground`,
      {
        red: 54,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanBackground`,
      {
        red: 70,
        green: 70,
        blue: 70,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionImage`,
      {
        red: 246,
        green: 246,
        blue: 246,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionMark`,
      {
        red: 246,
        green: 87,
        blue: 78,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionText`,
      {
        red: 246,
        green: 246,
        blue: 246,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPhotoBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollBackground`,
      {
        red: 222,
        green: 176,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachUnactiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.3053149045489 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.623002843110567),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.37276225608225066 + 0.024975227520811875,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botButtonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.7436773792521 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6525821210342831),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.060936797914566215 + 0.0012572831243192252,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackgroundPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.615133007099 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6798120410244392),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.1277637831791658 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botSwitchToInlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiBottomPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7118795307775 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45784968719029984),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17405558809133864 + 0.07588861826610134,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.1588488271885 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6541011389637217),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.033976677454780654 + 0.0006239682921689747,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackspace`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7118795307775 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45784968719029984),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17405558809133864 + 0.07588861826610134,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.9467789188431 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9416020068705077),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9551507358336518 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelEmptyText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7118795307775 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45784968719029984),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17405558809133864 + 0.07588861826610134,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIconSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -22.0420849062117 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8827039908485744),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8441158479224109 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelNewTrending`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.7120655051657 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9463189780847785),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8606785446473928 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.7977895334929 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4051380446620228),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6356945671419404 + 0.39229293300696577,
            ),
          ),
        }),
        alpha: 10,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelectorLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.8615994101872 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2560855400151402),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11899400031199749 + 0.18238317730351428,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.7863300033354 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13077928285750762),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1031939804337332 + 0.40423576252219157,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingDescription`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.7977895334929 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4051380446620228),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6356945671419404 + 0.39229293300696577,
            ),
          ),
        }),
        alpha: 10,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7118795307775 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45784968719029984),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17405558809133864 + 0.07588861826610134,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_fieldOverlayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintBackground`,
      {
        red: 17,
        green: 17,
        blue: 17,
        alpha: 204,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounter`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounterBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.9201477570873 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9400365591610385),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8943686612374436 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1267609901635 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5119286290910507),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13015134134462486 + 0.03760816142399751,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.0442296763894 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38601902914950376),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1874438645155509 + 0.13027758311057247,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.998935630665 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39750083564875516),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19301922225524903 + 0.12494768967658888,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1267609901635 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5119286290910507),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13015134134462486 + 0.03760816142399751,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.6974744009223 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8232429985251257),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8441158479224109 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.5206505174274 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6022573877857462),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.38483827826521616 + 0.03934507256985614,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSelectedProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioTitleText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubble`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.5223465445362 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6404123759889572),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04394754399566605 + 0.0017223482563660632,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.6057371907804 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7728909571529972),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.12504368200436017 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.1414228798565 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.851356159173067),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6741607177439006 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.998935630665 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39750083564875516),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19301922225524903 + 0.12494768967658888,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inDownCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.2037332983134 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6083648354672813),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06536747659684858 + 0.005988604048666601,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.7722632180845 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7817094858355564),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.1964707192541385 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.019352435305 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7192508524723752),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.05698932533764434 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.0064017825179 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39750083564875516),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19301922225524903 + 0.12494768967658888,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgressSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5601651935764 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9540245351878642),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.13051809146861665 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inGreenCall`,
      {
        red: 72,
        green: 221,
        blue: 118,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.8456569396911 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5574665045373552),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7478708570216875 + 0.14004799713979374,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.1414228798565 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.851356159173067),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6741607177439006 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.2926455773571 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7033170789647848),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.05698932533764434 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.1234414300896 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.943333859962477),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.13051809146861665 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.1414228798565 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.851356159173067),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6741607177439006 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.1755955608625 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6216592399992462),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08026134568323455 + 0.0055549993607129505,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9358613212788 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5430303860433234),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5201781687220601 + 0.11321910256756398,
            ),
          ),
        }),
        alpha: 121,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 165,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.8456569396911 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5574665045373552),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7478708570216875 + 0.14004799713979374,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.998935630665 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39750083564875516),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19301922225524903 + 0.12494768967658888,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.0095651917494 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.512689159427725),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17364919950051858 + 0.04985649257833427,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSiteNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.8539428567075 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4014353069403103),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22142499552995165 + 0.13985620403046328,
            ),
          ),
        }),
        alpha: 217,
      } as Color,
    ] as [string, Color],
    [
      `chat_inUpCall`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.0064017825179 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39750083564875516),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19301922225524903 + 0.12494768967658888,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.0064017825179 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39750083564875516),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19301922225524903 + 0.12494768967658888,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.9646258919624 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6148317393851706),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6284247250284463 + 0.05064834576961982,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.0095651917494 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.512689159427725),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17364919950051858 + 0.04985649257833427,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.5206505174274 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6022573877857462),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.38483827826521616 + 0.03934507256985614,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inlineResultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_linkSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.60189159203 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8747516715891054),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8035277810167148 + 0),
          ),
        }),
        alpha: 90,
      } as Color,
    ] as [string, Color],
    [
      `chat_lockIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaBroadcast`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaInfoText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhoto`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIconSelected`,
      {
        red: 217,
        green: 217,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoSelected`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 127,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaMenu`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentClock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 178,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaViews`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkIn`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkOut`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.5685703144888 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7040239243105577),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCancelInlineBot`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.0186700604193 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9099605640748597),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7409995032643613 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.2322920410021 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5026095261074461),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21994584857996338 + 0.06863189307656305,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.8779277691423 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45699841497841415),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1880514782301662 + 0.08247845530251909,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelPressedSend`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelSend`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 121,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVideoFrame`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3491648415629 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9614539376392977),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9729464270254421 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3119370647281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8759630440315859),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6316361609902318 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDelete`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDuration`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoicePressed`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextIn`,
      {
        red: 250,
        green: 250,
        blue: 250,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextOut`,
      {
        red: 250,
        green: 250,
        blue: 250,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.8744705541832 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.49032737269366544),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11088719294212153 + 0.03812326918877729,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1871634300136 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7921003207983304),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5708573983943251 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6548657418281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6529599913555298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7560241702800166 + 0.015171447572634063,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6548657418281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6529599913555298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7560241702800166 + 0.015171447572634063,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1871634300136 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7921003207983304),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5708573983943251 + 0),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.004404042633 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7830938466473134),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0091141605731628 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.0338533246609 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7942560746923004),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7034120299191401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSelectedProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioTitleText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBroadcast`,
      {
        red: 70,
        green: 170,
        blue: 54,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubble`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.88458804979 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8429902616516105),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.2658568813314531 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleGradientSelectedOverlay`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.6539320106575 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8694216019715092),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.4484335208265145 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3576835120251 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8282477578310914),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6548657418281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6529599913555298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7560241702800166 + 0.015171447572634063,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.9351288415532 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8373198031788077),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.3380253309515477 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.1994983304716 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8696966728855695),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5386318181635006 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2956296281666 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8398427851707846),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.26167913977903573 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6548657418281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6529599913555298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7560241702800166 + 0.015171447572634063,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgressSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.3310362296293 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9980622176869177),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6247054756640616 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.6948752309768 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7673605321485957),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outGreenCall`,
      {
        red: 72,
        green: 221,
        blue: 118,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.6948752309768 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7673605321485957),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3576835120251 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8282477578310914),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.9985562603298 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.833461457488195),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.26167913977903573 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.6728150684377 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9367799894261473),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.38833475767116143 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3576835120251 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8282477578310914),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9602610077466 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7821517400882694),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.38312008839364897 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.0937400934194 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.782420916243451),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6456315548145871 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 223,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.5685703144888 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7040239243105577),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.5685703144888 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7040239243105577),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.5685703144888 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7040239243105577),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6548657418281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6529599913555298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7560241702800166 + 0.015171447572634063,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.5685703144888 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7040239243105577),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.1357098273975 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7881315883480748),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckRead`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.1357098273975 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7881315883480748),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckReadSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6189558468226 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6513444859680103),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6103477003917145 + 0.013725650572305435,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSiteNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6548657418281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6529599913555298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7560241702800166 + 0.015171447572634063,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outUpCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6548657418281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6529599913555298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7560241702800166 + 0.015171447572634063,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.0782169294815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.37694897116827675),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5914636164602084 + 0.4345765432475849,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.6948752309768 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7673605321485957),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.6548657418281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6529599913555298),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7560241702800166 + 0.015171447572634063,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4315257007079 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47988620680436195),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7198293102065428 + 0.2678357138040168,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1871634300136 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7921003207983304),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5708573983943251 + 0),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.004404042633 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7830938466473134),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0091141605731628 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3423907605408 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7955866137056242),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7486542360975742 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewDurationText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewGameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordTime`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordVoiceCancel`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3376854281963 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9171303589404519),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8035277810167148 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceDot`,
      {
        red: 237,
        green: 93,
        blue: 84,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPause`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPausePressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.657602804192 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29199568382275126),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.4419854690576735 + 0.5421599169519423,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.6887721153456 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6397810281739512),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9423170401828098 + 0.037855747730385005,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgressInner`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7072571387487 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.48592422801805535),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20624230241123317 + 0.0733356455951459,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.5231933504172 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3147854194896924),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.00606859079022641 + 0.006485077269685395,
            ),
          ),
        }),
        alpha: 106,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.9356860273822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29687522650941733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16830442771710852 + 0.2004122316520832,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_reportSpam`,
      {
        red: 233,
        green: 100,
        blue: 97,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretChatStatusText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.0064017825179 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39750083564875516),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19301922225524903 + 0.12494768967658888,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.4611464996843 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3250797590474478),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.4237562748708095 + 0.42567016972598065,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerBackground`,
      {
        red: 30,
        green: 30,
        blue: 30,
        alpha: 182,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_selectedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.5388754975979 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8851826801737769),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8035277810167148 + 0),
          ),
        }),
        alpha: 42,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentError`,
      {
        red: 246,
        green: 87,
        blue: 78,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3615012868261 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5901003275329872),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07618682926030737 + 0.009450128488407933,
            ),
          ),
        }),
        alpha: 130,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.5899924012619 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8852964938499267),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.4427609499233579 + 0),
          ),
        }),
        alpha: 150,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceLink`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.0623028513486 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5811512970075386),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3477211556789152 + 0.04891385224244056,
            ),
          ),
        }),
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.0623028513486 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5811512970075386),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3477211556789152 + 0.04891385224244056,
            ),
          ),
        }),
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `chat_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8379924046043 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.848415677562845),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9729464270254421 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerViaBotNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickersHintPanel`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2389297960621 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6158202194884325),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07555032014278655 + 0.005963328919229582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_textSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.60189159203 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8747516715891054),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8035277810167148 + 0),
          ),
        }),
        alpha: 90,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.15071446033 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.48357980933795713),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.25225627369313347 + 0.09130126050558483,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.8268498028726 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8633001135615689),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6886957832471782 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.3881781717296 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.36105586826931446),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19370342667962653 + 0.15673911056986112,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.8647160702959 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8468743032772068),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8277405825623322 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartArrowIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.1852477200722 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.49370509693631054),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15076332596056757 + 0.05049210817603686,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.51015180124 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6869310751818124),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.05698932533764434 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 218,
      } as Color,
    ] as [string, Color],
    [
      `chat_wallpaper`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8235010592108 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6556830508140026),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.020873280949310884 + 0.00033426267422523347,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.6228490614747 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8771873171685892),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7641015699941521 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.390847032342 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8774652570448762),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8523737292953775 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3752526018649 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8961932984439639),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7034120299191401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.8506435432934 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8750031886730768),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7876184144849647 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7781821807632 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9259581017099671),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6886957832471782 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.836225679213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8759630440315859),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6316361609902318 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePinBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.1640303325804 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6362509397828044),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07024255988622757 + 0.0032100801813451044,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.803224848984 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0673799120698773),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06383938348151502 + 0.5427985893591468,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackgroundActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.9448392379791 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8547327109148765),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7797332498932225 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_attachMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -23.1364619737713 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.36078149694901346),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17774760821274602 + 0.14406673632053837,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_date`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.310756381338 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.34945513167877185),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14156773704767164 + 0.12284786862421995,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_draft`,
      {
        red: 252,
        green: 71,
        blue: 74,
        alpha: 217,
      } as Color,
    ] as [string, Color],
    [
      `chats_mentionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.0501111539177 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6390964019546413),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028505469593918396 + 0.001175570150777057,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloud`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloudBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.153848728716 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.912603389128749),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7563548988728147 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.908076423 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.828520147022961),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5136344524446108 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.340158350284 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3685743624991398),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18688120629604113 + 0.1444897556708527,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 244,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuName`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhone`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -18.833068531953 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.28186576279344194),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3197858257700138 + 0.4173484007390172,
            ),
          ),
        }),
        alpha: 147,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhoneCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.4432229281781 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.47541500386032576),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.27693025547600086 + 0.10649973553057515,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3480723061373 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6884336261785658),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.05199576516979068 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7251695410297 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6647347175347523),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.020216245869311686 + 0.00005616860313780242,
            ),
          ),
        }),
        alpha: 164,
      } as Color,
    ] as [string, Color],
    [
      `chats_message`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_messageArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_message_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.8744705541832 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.49032737269366544),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11088719294212153 + 0.03812326918877729,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_name`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.9154785615795 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10326463771928693),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14658281234724854 + 0.7645319117428394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.9154785615795 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10326463771928693),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14658281234724854 + 0.7645319117428394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.9154785615795 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10326463771928693),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14658281234724854 + 0.7645319117428394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.9154785615795 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10326463771928693),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14658281234724854 + 0.7645319117428394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.9154785615795 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10326463771928693),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14658281234724854 + 0.7645319117428394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.9154785615795 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10326463771928693),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14658281234724854 + 0.7645319117428394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_onlineCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1695970767942 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.569906516406307),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19302887245470524 + 0.031330041639445944,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedOverlay`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretIcon`,
      {
        red: 113,
        green: 215,
        blue: 86,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretName`,
      {
        red: 113,
        green: 215,
        blue: 86,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -22.3025863655608 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5185702932353584),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11727430970076985 + 0.03201735576341753,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentError`,
      {
        red: 213,
        green: 82,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentReadCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabletSelectedOverlay`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterMuted`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.4547379653164 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6385616865137657),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12501577891313664 + 0.005260064184287855,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkbox`,
      {
        red: 94,
        green: 194,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.4547379653164 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6385616865137657),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12501577891313664 + 0.005260064184287855,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.6987921687832 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8709651748479802),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8196230458338652 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.8584098176865 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5478645376189241),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10499586899384722 + 0.021765519270230998,
            ),
          ),
        }),
        alpha: 100,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.96519925343 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5578507869789225),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16736137387005834 + 0.031208668957824256,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteBackground`,
      {
        red: 85,
        green: 190,
        blue: 97,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.2732869489909 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.534847362909216),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1385820825346754 + 0.03265141636072463,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.5858126442408 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45211902799713904),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6537808166885755 + 0.2965848166574603,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner3`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.2732869489909 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.534847362909216),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1385820825346754 + 0.03265141636072463,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.7897774441794 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8867441403314866),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9819162064165924 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter2`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter3`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.7897774441794 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8867441403314866),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9819162064165924 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackgroundGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.5034166456012 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6468785222818215),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.031174300562858755 + 0.0009116430887164446,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButtonSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.6622079534338 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6836293496585495),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.09734472465198594 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCameraIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.0931518745794 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9610200974742811),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7718943276657506 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.8584098176865 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5478645376189241),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10499586899384722 + 0.021765519270230998,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.96519925343 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5578507869789225),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16736137387005834 + 0.031208668957824256,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogGrayLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.1811857440101 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.21870817315587485),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.002075783622510164 + 0.004064439192626062,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.1355818942838 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.37207641696964455),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23468193676059623 + 0.1776281018001317,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputField`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.9171550523209 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9945332394287482),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9114972883261669 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.8268498028726 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8633001135615689),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6886957832471782 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.5126095064302 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6615210590626253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08758085248505193 + 0.0006512503135826582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.60189159203 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8747516715891054),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8035277810167148 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `dialogProgressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.96519925343 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5578507869789225),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16736137387005834 + 0.031208668957824256,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.9171550523209 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9945332394287482),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9114972883261669 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRedIcon`,
      {
        red: 238,
        green: 104,
        blue: 111,
        alpha: 222,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogScrollGlow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.0154462428627 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.019024644950866552),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.02776494049555985 + 0.9035683151071164,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.6715872822574 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6978596997302147),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.07360047793952296 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.1967524617714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2721561857309994),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12274735758039723 + 0.17009763469829597,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.9729476360488 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.341574573165785),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1472155870869004 + 0.13394313362235816,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlack`,
      {
        red: 246,
        green: 246,
        blue: 246,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextLink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed`,
      {
        red: 238,
        green: 104,
        blue: 111,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed2`,
      {
        red: 238,
        green: 104,
        blue: 111,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTopBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.5938944302779 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8291185581261963),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8196230458338652 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.340158350284 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3685743624991398),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18688120629604113 + 0.1444897556708527,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8235010592108 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6556830508140026),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.020873280949310884 + 0.00033426267422523347,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3576835120251 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8282477578310914),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `divider`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 149,
      } as Color,
    ] as [string, Color],
    [
      `emptyListPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.1997247884095 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9162441454297255),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7409995032643613 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollInactive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.6818824108031 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5542642231866872),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08688049330197044 + 0.016843291733277067,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.9861656579033 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9397006953728787),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8690303698852341 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.2667503273355 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9602132147275996),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7641015699941521 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButton`,
      {
        red: 217,
        green: 87,
        blue: 87,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButtonPressed`,
      {
        red: 198,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_unread`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.7120655051657 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9463189780847785),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8606785446473928 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIconBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.6503602263078 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9030893800230714),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8690303698852341 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_iconText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `graySection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.97802803311 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6815023177305395),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.021222937844128188 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_cursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_hintText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_offlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_onlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.6255304212548 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6962682140669624),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.07969404295879075 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanDelete`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanText`,
      {
        red: 245,
        green: 245,
        blue: 245,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.002573648096 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5161237282354773),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.26544786017497096 + 0.07401701705222757,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPerformer`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPlayPause`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.3881781717296 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.36105586826931446),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19370342667962653 + 0.15673911056986112,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.8988660279031 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7127771825874215),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.10208166034144146 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chats_menuTopShadow`,
      {
        red: 12,
        green: 12,
        blue: 12,
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `key_graySectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_player_progressCachedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.5517078889318 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6270438985099496),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21963017295918874 + 0.013267364398292165,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_other`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 67,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_scrollUp`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 37,
      } as Color,
    ] as [string, Color],
    [
      `listSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 46,
      } as Color,
    ] as [string, Color],
    [
      `listSelectorSDK21`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -27.0036962474605 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.21707877506282866),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.34061426658754634 + 0.6743818374057571,
            ),
          ),
        }),
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `location_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3576835120251 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8282477578310914),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_placeLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3576835120251 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8282477578310914),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationBackground`,
      {
        red: 255,
        green: 100,
        blue: 100,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3576835120251 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8282477578310914),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressInner`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -18.1421720231043 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15812028441565168),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22029691852004593 + 0.6773251339738733,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressOuter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.1570268574592 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8387267434789766),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6598061904155045 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.0605142181041 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.904842303112969),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8606785446473928 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkbox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.5438404559329 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0153402779880463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9729464270254421 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.6658168718845 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.921239331604535),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5136344524446108 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5347824302813 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9235245443413436),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badge`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.6167645943458 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9360699354973193),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9729464270254421 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_disabledButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.7733882460892 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5808922619211454),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19674977405655988 + 0.027772958858010326,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_enabledButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.5160911310149 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8902238121339014),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarItems`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.132376266121 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6565987773180244),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08911769990909812 + 0.00130631562058563,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSubtitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTop`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -22.2631776648491 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6468691683826929),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.027730442057782183 + 0.0008113279580118281,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_background`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.552497896528 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6537924255037524),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03784317288435923 + 0.0007123855212466863,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_button`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_buttonActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3126323251699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5719992433086529),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2541297799555711 + 0.04020744252536158,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholderBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.9594653704963 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6569006991661277),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08268502862414077 + 0.001175136237135269,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.4884600156268 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6040415396228216),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09249234491984734 + 0.009167130018946422,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_seekBarBackground`,
      {
        red: 82,
        green: 82,
        blue: 82,
        alpha: 71,
      } as Color,
    ] as [string, Color],
    [
      `player_time`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.8506435432934 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8750031886730768),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7876184144849647 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7781821807632 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9259581017099671),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6886957832471782 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_adminIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_creatorIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8379924046043 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.848415677562845),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9729464270254421 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_tabText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_title`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.5848094178771 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9051892727112274),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0274873739885289 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `progressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.5848094178771 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9051892727112274),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0274873739885289 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 158,
      } as Color,
    ] as [string, Color],
    [
      `radioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3083195274307 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8976583985148304),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8359048244371196 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sessions_devicesImage`,
      {
        red: 150,
        green: 150,
        blue: 150,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_actionMode`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3013713358815 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6784376195568965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.04574921372894043 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.5025104168816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6855337672211949),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.06225198428461075 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholderText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.4924973783772 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1375979889214674),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11782324497000006 + 0.4330885787855036,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_photoPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8235010592108 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6556830508140026),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.020873280949310884 + 0.00033426267422523347,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_startStopLoadIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sheet_other`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartActiveLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartActivePickerChart`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3324703103386 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5811305865024462),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1743455698640736 + 0.02453196369367526,
            ),
          ),
        }),
        alpha: 216,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartBackZoomColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8524183377141 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9656285993060361),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8943686612374436 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartCheckboxInactive`,
      {
        red: 155,
        green: 155,
        blue: 155,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartChevronColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.0144413483607 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.23674686836324907),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08712970232484313 + 0.1512569084619128,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartHighlightColor`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 134,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartHintLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 26,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartInactivePickerChart`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.1264107612316 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5981090071813921),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.0678258102778269 + 0.007432183394173398,
            ),
          ),
        }),
        alpha: 200,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_blue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.2863143470426 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9523743595687135),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_golden`,
      {
        red: 222,
        green: 172,
        blue: 31,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_green`,
      {
        red: 61,
        green: 194,
        blue: 63,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_indigo`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 25.3222526603469 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.893766224647833),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7955498990534864 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightblue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1201029560458 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9841048788773066),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8774292807322728 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightgreen`,
      {
        red: 143,
        green: 207,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_orange`,
      {
        red: 229,
        green: 190,
        blue: 15,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_red`,
      {
        red: 243,
        green: 76,
        blue: 68,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartRipple`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.3207644769365 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.44099011514757414),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.44594731881878086 + 0.21816592822686368,
            ),
          ),
        }),
        alpha: 44,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartSignature`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.5210974829716 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.33398811037473985),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.28271666962577824 + 0.2692098863304814,
            ),
          ),
        }),
        alpha: 183,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartSignatureAlpha`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 139,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -18.4663239140785 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5156198657353451),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17170519597246026 + 0.04808516544993658,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menuSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `switch2Track`,
      {
        red: 245,
        green: 126,
        blue: 126,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switch2TrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.49024384798 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9324324582571595),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8523737292953775 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchThumb`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.4866810305336 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6747527798766243),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.19297085412833265 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchThumbChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.8506435432934 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8750031886730768),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7876184144849647 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrack`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.3455081924942 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5467022778210513),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19793351407344123 + 0.04152088335514677,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.3465985963748 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38916219644187805),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09521293385485617 + 0.06490543605789806,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.492648376979 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8156126603874981),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.4139677604504 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5122746810537777),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7684120215806666 + 0.2213919363017535,
            ),
          ),
        }),
        alpha: 25,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelectorChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.0338979031213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7673605321485957),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumb`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.1588488271885 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6541011389637217),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.033976677454780654 + 0.0006239682921689747,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumbChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.0751340362309 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8455511829306055),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.4259953590940123 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.5296776119025 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8571664898700436),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7108382961966219 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_background`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.3851664146716 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6001519615965905),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.0411847205413879 + 0.004363533858388121,
            ),
          ),
        }),
        alpha: 245,
      } as Color,
    ] as [string, Color],
    [
      `undo_cancelColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.0067331118543 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7961724108610874),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0460542614509813 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_infoColor`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `voipgroup_topPanelGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.6427556180496 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4979308942365691),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17151452480555682 + 0.05556288431994318,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_addressConfirmBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackgroundSelector`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 64,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.2671529384097 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9573124342802183),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8277405825623322 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1321484734463 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0027700935729222),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7034120299191401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_commentText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_dateText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayBackground`,
      {
        red: 41,
        green: 41,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_graySettingsBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText`,
      {
        red: 119,
        green: 119,
        blue: 119,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText2`,
      {
        red: 102,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_greenText`,
      {
        red: 55,
        green: 168,
        blue: 24,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_pullBackground`,
      {
        red: 33,
        green: 33,
        blue: 33,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_redText`,
      {
        red: 219,
        green: 64,
        blue: 64,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_releaseBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1768484587343 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9782713843568022),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5198188771390229 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_statusText`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundCheckText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.0751340362309 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8455511829306055),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.4259953590940123 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8235010592108 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6556830508140026),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.020873280949310884 + 0.00033426267422523347,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGrayShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.1588488271885 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6541011389637217),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.033976677454780654 + 0.0006239682921689747,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhite`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.1588488271885 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6541011389637217),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.033976677454780654 + 0.0006239682921689747,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlackText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 224,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueHeader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 224,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText5`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3869865340452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8865699549394952),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.78404034537 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9696043980703165),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6526964266883367 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText7`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayLine`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 200,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText5`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText7`,
      {
        red: 198,
        green: 198,
        blue: 198,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText8`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText`,
      {
        red: 97,
        green: 189,
        blue: 103,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText2`,
      {
        red: 97,
        green: 211,
        blue: 107,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteHintText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.1767749568476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3705023526444655),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18518664299822504 + 0.14151328204110022,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputField`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.466372555716 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.616106408042502),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1536707934001226 + 0.012055651397686948,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.6376798641056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8522398900596436),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9029092814358181 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.5848094178771 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9051892727112274),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0274873739885289 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7376997147072 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8855103477765854),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7876184144849647 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText`,
      {
        red: 205,
        green: 90,
        blue: 90,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText2`,
      {
        red: 241,
        green: 109,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText3`,
      {
        red: 210,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText4`,
      {
        red: 207,
        green: 92,
        blue: 95,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText5`,
      {
        red: 238,
        green: 104,
        blue: 111,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText6`,
      {
        red: 255,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteValueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.7711964308699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8358360561062034),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0182765943106473 + 0),
          ),
        }),
        alpha: 224,
      } as Color,
    ] as [string, Color],
  ]);

export default dark;
