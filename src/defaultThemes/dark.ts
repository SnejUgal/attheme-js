// This file was automatically generated by .attheme default theme
// generator, available at:
//     https://gitlab.com/snejugal/attheme-default-theme-generator

import Attheme from "..";
import { Color } from "../types";
import { PartialHsbColor, hsbToRgb } from "@snejugal/color";

/**
 * Generates the Dark theme.
 */
const dark = (accent: PartialHsbColor) =>
  new Attheme([
    [
      `actionBarActionModeDefault`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1810823922761 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9866268470143736),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.5270127919302072 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.5065258805944 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9816524490898485),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 10.639516436484197 + 0),
          ),
        }),
        alpha: 86,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultTop`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8023604551533 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0425605319265372),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.300068575905336 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarBrowser`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefault`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.684213013168 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9703635605540298),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.4679684066400926 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSearch`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.4402918025938 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0064784497354127),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 5.5170209701077955 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearch`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchArchivedPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.4402918025938 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0064784497354127),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 5.5170209701077955 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.2786350170842 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.058388618497783),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.2839160889675214 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItem`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3120808350731 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5674638325753999),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 16.86476150997796 + 0.05981600250160364,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubtitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabActiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6925900718042 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3577044747896512),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.7552605049812 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3841817673185917),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2357475767996 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1803198994812532),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.10392699845737 + 0),
          ),
        }),
        alpha: 55,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabUnactiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarWhiteSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 47,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconBlue`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5884251650425 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0926973754488318),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.391346020507764 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorCyan`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5884251650425 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0926973754488318),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.391346020507764 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorGreen`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5884251650425 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0926973754488318),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.391346020507764 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorOrange`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5884251650425 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0926973754488318),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.391346020507764 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorPink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5884251650425 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0926973754488318),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.391346020507764 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorRed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5884251650425 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0926973754488318),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.391346020507764 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorViolet`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5884251650425 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0926973754488318),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.391346020507764 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarCyan`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarGreen`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarOrange`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarPink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarRed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarViolet`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7617717531735 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9727580248682188),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 5.039377742159879 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchivedHidden`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6312369061056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9738877430505768),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 6.149859761509288 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundBlue`,
      {
        red: 84,
        green: 156,
        blue: 221,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundCyan`,
      {
        red: 95,
        green: 190,
        blue: 213,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGreen`,
      {
        red: 118,
        green: 200,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGroupCreateSpanBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.9422646689075 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4276095691221282),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 12.926034081241012 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6696523304948 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3918361744989305),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 35.63855788618245 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundOrange`,
      {
        red: 242,
        green: 188,
        blue: 100,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundPink`,
      {
        red: 242,
        green: 116,
        blue: 154,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundRed`,
      {
        red: 220,
        green: 128,
        blue: 91,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundSaved`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.565128746763 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3658598511957742),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundViolet`,
      {
        red: 142,
        green: 133,
        blue: 238,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageBlue`,
      {
        red: 121,
        green: 196,
        blue: 252,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageCyan`,
      {
        red: 93,
        green: 229,
        blue: 221,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageGreen`,
      {
        red: 148,
        green: 231,
        blue: 133,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageOrange`,
      {
        red: 255,
        green: 201,
        blue: 96,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessagePink`,
      {
        red: 246,
        green: 119,
        blue: 155,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageRed`,
      {
        red: 255,
        green: 173,
        blue: 124,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageViolet`,
      {
        red: 154,
        green: 161,
        blue: 251,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileCyan`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileGreen`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileOrange`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfilePink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileRed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileViolet`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_text`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedGreenIcon`,
      {
        red: 72,
        green: 221,
        blue: 118,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedRedIcon`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6340227511424 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.903635253517704),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 5.5170209701077955 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9852793903511 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4316766030069517),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 40.554166014556706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_addContact`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0304417974967 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6122398717519776),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 15.912088478160056 + 0.028699189048256902,
            ),
          ),
        }),
        alpha: 217,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachActiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6925900718042 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3577044747896512),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioBackground`,
      {
        red: 246,
        green: 111,
        blue: 107,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCameraIcon1`,
      {
        red: 255,
        green: 130,
        blue: 85,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5525965396399 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.516558928627249),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 45.84409727678819 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactBackground`,
      {
        red: 222,
        green: 176,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachEmptyImage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileBackground`,
      {
        red: 90,
        green: 188,
        blue: 244,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryBackground`,
      {
        red: 77,
        green: 150,
        blue: 245,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachHideBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.4225174064919 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2083514947908334),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.5867695305397405 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationBackground`,
      {
        red: 54,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanBackground`,
      {
        red: 70,
        green: 70,
        blue: 70,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionImage`,
      {
        red: 246,
        green: 246,
        blue: 246,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionMark`,
      {
        red: 246,
        green: 87,
        blue: 78,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionText`,
      {
        red: 246,
        green: 246,
        blue: 246,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPhotoBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollBackground`,
      {
        red: 222,
        green: 176,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachUnactiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.4818138453382 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9501585290898331),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 18.795121683469716 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botButtonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.0798236799587 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9952706879095476),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.933240663560355 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackgroundPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.2083680521117 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0367997772406676),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 6.020079977500126 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botSwitchToInlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiBottomPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1116215284333 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6982789727779282),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 11.941758605034057 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6646522320223 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.997587383342734),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6316959697168085 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackspace`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1116215284333 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6982789727779282),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 11.941758605034057 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1232778596324 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4360627527302237),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 45.00558512910672 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelEmptyText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1116215284333 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6982789727779282),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 11.941758605034057 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIconSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.2185838470009 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3462357914433432),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 39.773751123525756 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelNewTrending`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.111435554045 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4432567334323556),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 40.554166014556706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9742884742821 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6178870174531143),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 45.68241346573698 + 0.07316947382032857,
            ),
          ),
        }),
        alpha: 10,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelectorLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.0380983509764 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3905630009761895),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 8.551171274963794 + 0.12264729317798348,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.9628289441246 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19945503043757304),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 7.415747003381859 + 0.3524316073422748,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingDescription`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9742884742821 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6178870174531143),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 45.68241346573698 + 0.07316947382032857,
            ),
          ),
        }),
        alpha: 10,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1116215284333 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6982789727779282),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 11.941758605034057 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_fieldOverlayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintBackground`,
      {
        red: 17,
        green: 17,
        blue: 17,
        alpha: 204,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounter`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounterBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9033533021235 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4336752459805437),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.14160489024337 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3032599309527 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7807562334507704),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.98624206094198 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2207286171787 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5887280884724374),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.47012946628349 + 0.03617935175954442,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1754345714542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6062393028998917),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.870786968563854 + 0.02805058676040841,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3032599309527 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7807562334507704),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.98624206094198 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8739733417115 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2555502197336115),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 39.773751123525756 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6971494582166 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9185190726496123),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 20.072402898351495 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSelectedProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioTitleText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubble`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.3011545146746 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.976710279751646),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2177638684303 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1787569561139122),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 5.891911992710113 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6820781793542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.298426363341472),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 31.76566424004406 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1754345714542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6062393028998917),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.870786968563854 + 0.02805058676040841,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inDownCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6197677608973 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9278337067154965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.3752104401473084 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.0512378411262 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1922063333268984),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 9.25747041701376 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1958513760943 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0969489779847992),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.6852703313840096 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1829007233071 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6062393028998917),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.870786968563854 + 0.02805058676040841,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgressSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.2633358656344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4550086875106554),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 6.149859761509288 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inGreenCall`,
      {
        red: 72,
        green: 221,
        blue: 118,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0221558804803 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8502072820782608),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.14160489024337 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6820781793542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.298426363341472),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 31.76566424004406 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.4691445181464 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0726479479554132),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.6852703313840096 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.7000596291212 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4387040488409273),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 6.149859761509288 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6820781793542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.298426363341472),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 31.76566424004406 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3520945016517 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9481093635522266),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.055620247725488 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.112360262068 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8281903663197856),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 30.090626384094257 + 0),
          ),
        }),
        alpha: 121,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 165,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0221558804803 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8502072820782608),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.14160489024337 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1754345714542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6062393028998917),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.870786968563854 + 0.02805058676040841,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1860641325387 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7819161388894271),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 10.639516436484197 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSiteNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0304417974967 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6122398717519776),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 15.912088478160056 + 0.028699189048256902,
            ),
          ),
        }),
        alpha: 217,
      } as Color,
    ] as [string, Color],
    [
      `chat_inUpCall`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1829007233071 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6062393028998917),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.870786968563854 + 0.02805058676040841,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1829007233071 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6062393028998917),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.870786968563854 + 0.02805058676040841,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1411248327516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9376965572342966),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.107036639356046 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1860641325387 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7819161388894271),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 10.639516436484197 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6971494582166 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9185190726496123),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 20.072402898351495 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inlineResultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_linkSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2216094671808 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3341074937092525),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.861288899690635 + 0),
          ),
        }),
        alpha: 90,
      } as Color,
    ] as [string, Color],
    [
      `chat_lockIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaBroadcast`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaInfoText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhoto`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIconSelected`,
      {
        red: 217,
        green: 217,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoSelected`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 127,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaMenu`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentClock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 178,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaViews`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkIn`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkOut`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.254930744722 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0737259769587486),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCancelInlineBot`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1951690012085 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3878055303476007),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 34.91502961119851 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.4087909817914 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7665434167979145),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 13.746378326451463 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9455732900685 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.696980674444871),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 12.926034081241012 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelPressedSend`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelSend`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 121,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVideoFrame`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.4743362176478 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4663394706416364),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 45.84409727678819 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5115639944827 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.335954990668304),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 29.761956880300072 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDelete`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDuration`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoicePressed`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextIn`,
      {
        red: 250,
        green: 250,
        blue: 250,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextOut`,
      {
        red: 250,
        green: 250,
        blue: 250,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.0509694949725 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7478115715892685),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.10392699845737 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.6363376291971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2080536774817827),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 26.898132699015836 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8313646826173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9958469881826407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8313646826173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9958469881826407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.6363376291971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2080536774817827),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 26.898132699015836 + 0),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1809029834222 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1943176595386076),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.54827856466429 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.7896477345498 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.211341476199919),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.14395184518505 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSelectedProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioTitleText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBroadcast`,
      {
        red: 70,
        green: 170,
        blue: 54,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubble`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.9389130094208 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2856673061856243),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 12.526865191051222 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleGradientSelectedOverlay`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.1695690485533 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3259784600077116),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 21.12966282613808 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4658175471857 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2631831138579181),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8313646826173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9958469881826407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.8883722176576 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2770191362111785),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 15.927358098778493 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6240027287392 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3263979781174429),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 25.379701063042287 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.5278714310442 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.280867004459175),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 12.330014897133351 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8313646826173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9958469881826407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgressSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.4924648295814 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.522171751195743),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 29.435391096756227 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.128625828234 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1703223549792088),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outGreenCall`,
      {
        red: 72,
        green: 221,
        blue: 118,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.128625828234 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1703223549792088),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4658175471857 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2631831138579181),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.8249447988809 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2711346685772769),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 12.330014897133351 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1506859907731 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4287085631741965),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 18.297879422881273 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4658175471857 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2631831138579181),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.8632400514642 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1928808272796763),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 18.052170307780827 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.7297609657913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.193291355132802),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 30.42140346244362 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 223,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.254930744722 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0737259769587486),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.254930744722 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0737259769587486),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.254930744722 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0737259769587486),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8313646826173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9958469881826407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.254930744722 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0737259769587486),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3122087681867 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.202000856007553),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckRead`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3122087681867 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.202000856007553),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckReadSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7954547876118 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9933831371108249),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 29.435391096756227 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSiteNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8313646826173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9958469881826407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outUpCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8313646826173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9958469881826407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2547158702708 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5748950971056986),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 42.50387980906292 + 0.1376573543414521,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.128625828234 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1703223549792088),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8313646826173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9958469881826407),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6080246414971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7318874663735835),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.6363376291971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2080536774817827),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 26.898132699015836 + 0),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1809029834222 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1943176595386076),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.54827856466429 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.48111029867 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2133707173274302),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 35.27571166612574 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewDurationText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewGameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordTime`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordVoiceCancel`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.4858156310144 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3987403789100141),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.861288899690635 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceDot`,
      {
        red: 237,
        green: 93,
        blue: 84,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPause`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPausePressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8341017449812 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.44533053502031367),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 31.76205049874529 + 0.32027988354209347,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8652710561348 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9757473940796401),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 46.266742786897524 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgressInner`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1162439204621 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.741096216250826),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 13.332525830328457 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6996922912065 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.48008777884207887),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.4361023169977569 + 0.0034385989993546665,
            ),
          ),
        }),
        alpha: 106,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1121849681714 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4527724578832095),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.09472733053964 + 0.11592214168483883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_reportSpam`,
      {
        red: 233,
        green: 100,
        blue: 97,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretChatStatusText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1829007233071 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6062393028998917),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.870786968563854 + 0.02805058676040841,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6376454404735 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.49578795523824376),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 30.452060404389822 + 0.21294132905520394,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerBackground`,
      {
        red: 30,
        green: 30,
        blue: 30,
        alpha: 182,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_selectedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.2846255616129 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3500161077442223),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.861288899690635 + 0),
          ),
        }),
        alpha: 42,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentError`,
      {
        red: 246,
        green: 87,
        blue: 78,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.4619997723846 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8999780104128097),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.055620247725488 + 0),
          ),
        }),
        alpha: 130,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.2335086579489 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3501896880678383),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 20.862377922190344 + 0),
          ),
        }),
        alpha: 150,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceLink`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.2388017921378 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.886329601300604),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 18.795121683469716 + 0),
          ),
        }),
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.2388017921378 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.886329601300604),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 18.795121683469716 + 0),
          ),
        }),
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `chat_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.0144913453935 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2939417551049597),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 45.84409727678819 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerViaBotNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickersHintPanel`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.5845712631486 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9392041150429585),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.8537683317867857 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_textSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2216094671808 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3341074937092525),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.861288899690635 + 0),
          ),
        }),
        alpha: 90,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3272134011192 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.737520679751617),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 16.386154870498434 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9966512563381 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3166424120462143),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.45053952027295 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5646771125189 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5506560949243373),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.91995540734732 + 0.05949853188090527,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0412150110851 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2915909633867286),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 39.00216777911101 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartArrowIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3617466608614 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7529630304205618),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 9.5924896158559 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6866507420292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0476572092705716),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.6852703313840096 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 218,
      } as Color,
    ] as [string, Color],
    [
      `chat_wallpaper`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0 + 360) % 360,
          saturation: Math.max(0, Math.min(1, accent.saturation * 1)),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.2006519977361 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3378221628263816),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.00357196567666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.5673459731312 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3382460564681984),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 40.16285283195164 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4482484573459 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3668087002270046),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.14395184518505 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0271424840827 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3344910892340403),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.1116581629568 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0453188784475 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.412203808776862),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.45053952027295 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9872753799977 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.335954990668304),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 29.761956880300072 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePinBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3405292733696 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9703635605540298),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.4679684066400926 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.9797237897733 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10276293094083798),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 4.587638879331711 + 0.5107507381708662,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackgroundActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1213381787683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.303576033959948),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.74011843317693 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_attachMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3129609145605 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5502376437840183),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 12.77333510561124 + 0.05483609864177213,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_date`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.4872553221273 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5329634969898005),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 10.173369777716623 + 0.05177979868775029,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_draft`,
      {
        red: 252,
        green: 71,
        blue: 74,
        alpha: 217,
      } as Color,
    ] as [string, Color],
    [
      `chats_mentionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.773389905293 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9747032520685572),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.401086879590529 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloud`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloudBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6696523304948 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3918361744989305),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 35.63855788618245 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0845753637892 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.26359854200042),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 24.20185443773137 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5166572910733 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5621227543423158),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.429695605822635 + 0.050673982982570545,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 244,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuName`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhone`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.0095674727422 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.42988111778017996),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 22.980514650278636 + 0.2568135083654669,
            ),
          ),
        }),
        alpha: 147,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhoneCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6197218689673 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7250683135245273),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 18.297879422881273 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.4754287530735 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0499487905382103),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.4499796188290914 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0983315181811 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.013804942356696),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9553343380117034 + 0),
          ),
        }),
        alpha: 164,
      } as Color,
    ] as [string, Color],
    [
      `chats_message`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_messageArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_message_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.0509694949725 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7478115715892685),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.10392699845737 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_name`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0919775023688 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15749169906266186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 10.5337641482822 + 0.6909462362448218,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0919775023688 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15749169906266186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 10.5337641482822 + 0.6909462362448218,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0919775023688 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15749169906266186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 10.5337641482822 + 0.6909462362448218,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0919775023688 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15749169906266186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 10.5337641482822 + 0.6909462362448218,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0919775023688 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15749169906266186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 10.5337641482822 + 0.6909462362448218,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0919775023688 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15749169906266186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 10.5337641482822 + 0.6909462362448218,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_onlineCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3460960175835 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8691798814973062),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 10.639516436484197 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedOverlay`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretIcon`,
      {
        red: 113,
        green: 215,
        blue: 86,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretName`,
      {
        red: 113,
        green: 215,
        blue: 86,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.47908530635 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7908856155295999),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.10392699845737 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentError`,
      {
        red: 213,
        green: 82,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentReadCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabletSelectedOverlay`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterMuted`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6312369061056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9738877430505768),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 6.149859761509288 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkbox`,
      {
        red: 94,
        green: 194,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6312369061056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9738877430505768),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 6.149859761509288 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.8752911095725 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3283326048564381),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 38.61967894612822 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0349087584757 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.835563061968391),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 6.020079977500126 + 0),
          ),
        }),
        alpha: 100,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1416981942193 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8507933616499231),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 9.424111614355972 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteBackground`,
      {
        red: 85,
        green: 190,
        blue: 97,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5502141102199 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8157102158508227),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 8.13917644342597 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.7623115850301 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6895389890524889),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 45.42371254701145 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner3`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5502141102199 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8157102158508227),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 8.13917644342597 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.0337236150314 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3523975329705893),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 46.266742786897524 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter2`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter3`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.0337236150314 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3523975329705893),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 46.266742786897524 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackgroundGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.3200844136096 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.986571974795977),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5138304101296631 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButtonSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.1612931057769 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0426216581469552),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.5867695305397405 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCameraIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.2696508153686 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.465677809242157),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.3707575894971 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0349087584757 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.835563061968391),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 6.020079977500126 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1416981942193 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8507933616499231),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 9.424111614355972 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogGrayLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.6423153152007 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.33355776527143405),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14917038875328514 + 0.003022380184450676,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3120808350731 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5674638325753999),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 16.86476150997796 + 0.05981600250160364,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputField`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.0936539931101 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.5167896107640384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.948685757865206 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9966512563381 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3166424120462143),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.45053952027295 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6891084472194 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0089037046807525),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.158806678843762 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2216094671808 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3341074937092525),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.861288899690635 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `dialogProgressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1416981942193 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8507933616499231),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 9.424111614355972 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.0936539931101 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.5167896107640384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.948685757865206 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRedIcon`,
      {
        red: 238,
        green: 104,
        blue: 111,
        alpha: 222,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogScrollGlow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1919451836519 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.029015001878191404),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.995249852884998 + 0.88963010592139,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.1519137769534 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0643247509049558),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.4679684066400926 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.3732514025606 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4150727785217707),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 8.820895805394429 + 0.10847753696301193,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.850553423162 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5209446435160017),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 10.579236736505525 + 0.06003980044053874,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlack`,
      {
        red: 246,
        green: 246,
        blue: 246,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextLink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed`,
      {
        red: 238,
        green: 104,
        blue: 111,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed2`,
      {
        red: 238,
        green: 104,
        blue: 111,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTopBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.7703933710671 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2645111950002077),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 38.61967894612822 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5166572910733 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5621227543423158),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.429695605822635 + 0.050673982982570545,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0 + 360) % 360,
          saturation: Math.max(0, Math.min(1, accent.saturation * 1)),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4658175471857 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2631831138579181),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `divider`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 149,
      } as Color,
    ] as [string, Color],
    [
      `emptyListPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.3762237291987 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3973887906546425),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 34.91502961119851 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollInactive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1416186484077 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8453233959587515),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.9238937212144345 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.8373354013075 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4331630110100915),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 40.947694247979484 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5567507318752 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.464447210486127),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 36.00357196567666 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButton`,
      {
        red: 217,
        green: 87,
        blue: 87,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButtonPressed`,
      {
        red: 198,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_unread`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.111435554045 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4432567334323556),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 40.554166014556706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIconBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8268591670971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.377326101234315),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 40.947694247979484 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_iconText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `graySection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.8454730261008 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.039377664077916),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_cursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_hintText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_offlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_onlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1979706379559 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.061897532965928),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.755090060768374 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanDelete`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanText`,
      {
        red: 245,
        green: 245,
        blue: 245,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1790725888853 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7871542929083368),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 16.155806458115194 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPerformer`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPlayPause`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5646771125189 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5506560949243373),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.91995540734732 + 0.05949853188090527,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.9246350313077 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0870758085061663),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.809968397927749 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chats_menuTopShadow`,
      {
        red: 12,
        green: 12,
        blue: 12,
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `key_graySectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_player_progressCachedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.2717931702789 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.956321652254853),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 11.002649950786656 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_other`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 67,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_scrollUp`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 37,
      } as Color,
    ] as [string, Color],
    [
      `listSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 46,
      } as Color,
    ] as [string, Color],
    [
      `listSelectorSDK21`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.1801951882497 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3310727260577113),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 24.47729233952496 + 0.5033909109134331,
            ),
          ),
        }),
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `location_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4658175471857 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2631831138579181),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_placeLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4658175471857 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2631831138579181),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationBackground`,
      {
        red: 255,
        green: 100,
        blue: 100,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4658175471857 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2631831138579181),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressInner`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.3186709638936 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2411535332800689),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 15.831022376526693 + 0.5667344221445294,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressOuter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.3335257982484 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2791648990129196),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 31.089295707382707 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2370131588933 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3799995317701836),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 40.554166014556706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkbox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7203393967222 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.5485229894650236),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 45.84409727678819 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1576841873263 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4050070845370422),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 24.20185443773137 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.2887186289295 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4084923244467387),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badge`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.206736464865 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4276256406738415),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 45.84409727678819 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_disabledButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9498871868784 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8859345398664682),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 10.639516436484197 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_enabledButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6925900718042 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3577044747896512),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarItems`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6911247930898 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0013965993217073),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.263508548881051 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSubtitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTop`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.4396766056383 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.98655770891078),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3466154090255626 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_background`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.2710031626828 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.997116556074001),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.8182386942876365 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_button`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_buttonActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.4891312659592 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8723715560415055),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 13.956076615152432 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholderBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.8640356887145 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0018570685190251),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.9539429229397847 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.335041043584 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9212401309945861),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 4.809968397927749 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_seekBarBackground`,
      {
        red: 82,
        green: 82,
        blue: 82,
        alpha: 71,
      } as Color,
    ] as [string, Color],
    [
      `player_time`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0271424840827 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3344910892340403),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.1116581629568 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0453188784475 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.412203808776862),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 32.45053952027295 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_adminIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_creatorIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.0144913453935 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2939417551049597),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 45.84409727678819 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_tabText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_title`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.2386916413337 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3805287045127574),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 48.414002883809346 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `progressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.2386916413337 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3805287045127574),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 48.414002883809346 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 158,
      } as Color,
    ] as [string, Color],
    [
      `radioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5151815317801 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3690431640720708),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 39.38685730394257 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sessions_devicesImage`,
      {
        red: 150,
        green: 150,
        blue: 150,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_actionMode`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5221297233292 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0347036097923306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6790093576708 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0455261370110664),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.933240663560355 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholderText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.6689963191665 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.20985442394865228),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 8.46703821426956 + 0.37394042265689303,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_photoPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0 + 360) % 360,
          saturation: Math.max(0, Math.min(1, accent.saturation * 1)),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_startStopLoadIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sheet_other`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartActiveLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartActivePickerChart`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5089692511278 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.886298015147711),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 9.424111614355972 + 0),
          ),
        }),
        alpha: 216,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartBackZoomColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.0289172785033 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4727063603478072),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.14160489024337 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartCheckboxInactive`,
      {
        red: 155,
        green: 155,
        blue: 155,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartChevronColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.8090597108501 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.36106906846126025),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 6.261332552589414 + 0.10751714184912456,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartHighlightColor`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 134,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartHintLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 26,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartInactivePickerChart`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6970902979792 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9121922649043089),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 3.5621966169072934 + 0),
          ),
        }),
        alpha: 200,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_blue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.5371867121682 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4524919599284767),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_golden`,
      {
        red: 222,
        green: 172,
        blue: 31,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_green`,
      {
        red: 61,
        green: 194,
        blue: 63,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_indigo`,
      {
        red: 135,
        green: 92,
        blue: 226,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightblue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 14.9436040152566 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.5008850353163503),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 41.34344110021665 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightgreen`,
      {
        red: 143,
        green: 207,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_orange`,
      {
        red: 229,
        green: 190,
        blue: 15,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_red`,
      {
        red: 243,
        green: 76,
        blue: 68,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartRipple`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.4972634177258 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6725659822990753),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 31.76566424004406 + 0),
          ),
        }),
        alpha: 44,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartSignature`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.3024035762392 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5093743234023022),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 20.31664334267814 + 0.12728398945466451,
            ),
          ),
        }),
        alpha: 183,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartSignatureAlpha`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 139,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.6428228548677 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7863858385468788),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 10.460610582495987 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menuSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `switch2Track`,
      {
        red: 245,
        green: 126,
        blue: 126,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switch2TrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6667427887692 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4220780255026944),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 40.16285283195164 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchThumb`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.3368200286771 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0290837608795094),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 9.092560867190327 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchThumbChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0271424840827 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3344910892340403),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.1116581629568 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrack`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.5220071332834 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8337904680353468),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 11.372912309267363 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4769024628359 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.593521818138733),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 6.842211395952074 + 0.017107826354108083,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.6691473177682 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2439129841391352),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5904667012396 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7812840066825131),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.11882998218707 + 0),
          ),
        }),
        alpha: 25,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelectorChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2103968439105 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1703223549792088),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumb`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6646522320223 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.997587383342734),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6316959697168085 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumbChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.2516329770201 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2895730366689968),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 20.072402898351495 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7061765526918 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3072878562377173),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.493868823316156 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_background`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.5616653554608 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9153080300787512),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 2.155649423512683 + 0),
          ),
        }),
        alpha: 245,
      } as Color,
    ] as [string, Color],
    [
      `undo_cancelColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1832320526436 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2142641324534367),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 49.28885289745105 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_infoColor`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `voipgroup_topPanelGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.8192545588388 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7594079084679848),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 10.82019456559241 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_addressConfirmBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackgroundSelector`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 64,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5563481208011 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4600231515695818),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 39.00216777911101 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.6913525857645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.5293518603661111),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 33.14395184518505 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_commentText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_dateText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayBackground`,
      {
        red: 41,
        green: 41,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_graySettingsBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText`,
      {
        red: 119,
        green: 119,
        blue: 119,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText2`,
      {
        red: 102,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_greenText`,
      {
        red: 55,
        green: 168,
        blue: 24,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_pullBackground`,
      {
        red: 33,
        green: 33,
        blue: 33,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_redText`,
      {
        red: 219,
        green: 64,
        blue: 64,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_releaseBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.6466526004765 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4919882146447432),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 24.493257293445012 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_statusText`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundCheckText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.2516329770201 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2895730366689968),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 20.072402898351495 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0 + 360) % 360,
          saturation: Math.max(0, Math.min(1, accent.saturation * 1)),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGrayShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6646522320223 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.997587383342734),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6316959697168085 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhite`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6646522320223 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.997587383342734),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6316959697168085 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlackText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 224,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueHeader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 224,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText5`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5634854748344 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3521318781061313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.0394607138408 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.4787699588491636),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 30.754291959108766 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText7`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayLine`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 200,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText5`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText7`,
      {
        red: 198,
        green: 198,
        blue: 198,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText8`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText`,
      {
        red: 97,
        green: 189,
        blue: 103,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText2`,
      {
        red: 97,
        green: 211,
        blue: 107,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteHintText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3532738976368 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5650631843914565),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 13.30792055029127 + 0.048548192887587084,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputField`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.3571285034947 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9396405889669287),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 7.834997215771714 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1858211951051 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2997741652794352),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 42.54402892131301 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.2386916413337 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3805287045127574),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 48.414002883809346 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9141986554964 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.3505158424901516),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 37.1116581629568 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText`,
      {
        red: 205,
        green: 90,
        blue: 90,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText2`,
      {
        red: 241,
        green: 109,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText3`,
      {
        red: 210,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText4`,
      {
        red: 207,
        green: 92,
        blue: 95,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText5`,
      {
        red: 238,
        green: 104,
        blue: 111,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText6`,
      {
        red: 255,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteValueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9476953716591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2747562333181384),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 47.98000172216388 + 0),
          ),
        }),
        alpha: 224,
      } as Color,
    ] as [string, Color],
  ]);

export default dark;
