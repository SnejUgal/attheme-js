// This file was automatically generated by .attheme default theme
// generator, available at:
//     https://gitlab.com/snejugal/attheme-default-theme-generator

import Attheme from "..";
import { Color } from "../types";
import { PartialHsbColor, hsbToRgb } from "@snejugal/color";

/**
 * Generates the Blue theme.
 */
const blue = (accent: PartialHsbColor) =>
  new Attheme([
    [
      `actionBarActionModeDefault`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.7599710946529 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.17783162490452936),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07594362897579536 + 0.11655843966829456,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultSelector`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultTop`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `actionBarBrowser`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0825733855558 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9326287819215505),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6559665078837437 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefault`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0825733855558 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9326287819215505),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6559665078837437 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9282935785792 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.34800678559765674),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23761487179599985 + 0.12148211422935157,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSearch`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.7083460402821 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.44714512938923306),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19464106702668754 + 0.05335340643660061,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearch`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchArchivedPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2991495284734 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0263862743306824),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.546239032196226 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItem`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2891126470401 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19741309229189818),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08593338583653654 + 0.11404929550854731,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubtitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.3142087520854 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2885482560765729),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6627855443008781 + 0.48493266907532123,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabActiveText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6303673941952 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0249203717476831),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5954280623759756 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabUnactiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.3142087520854 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2885482560765729),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6627855443008781 + 0.48493266907532123,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarWhiteSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconBlue`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.5704064495408 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0193497431542005),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7105974027519577 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2017914837638 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9652577117628525),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8794292137265425 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.9553473328236 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18744896196524094),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2685515240205108 + 0.38333324145201675,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchivedHidden`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2961949428007 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0748461966103922),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6202681933573417 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundBlue`,
      {
        red: 84,
        green: 156,
        blue: 221,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundCyan`,
      {
        red: 95,
        green: 190,
        blue: 213,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGreen`,
      {
        red: 118,
        green: 200,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGroupCreateSpanBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4501182412235 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18085311896374323),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.45191101926933525 + 0.6777906837965639,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1519799710106 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9906947868516234),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7874357327595615 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundOrange`,
      {
        red: 242,
        green: 140,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundPink`,
      {
        red: 242,
        green: 116,
        blue: 154,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundRed`,
      {
        red: 229,
        green: 101,
        blue: 85,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundSaved`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.126973847317 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0594038487290196),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.665849140852372 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundViolet`,
      {
        red: 142,
        green: 133,
        blue: 238,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageBlue`,
      {
        red: 32,
        green: 141,
        blue: 214,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageCyan`,
      {
        red: 47,
        green: 163,
        blue: 201,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageGreen`,
      {
        red: 80,
        green: 178,
        blue: 50,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageOrange`,
      {
        red: 216,
        green: 123,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessagePink`,
      {
        red: 210,
        green: 104,
        blue: 149,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageRed`,
      {
        red: 202,
        green: 86,
        blue: 80,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageViolet`,
      {
        red: 128,
        green: 109,
        blue: 207,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4812282552116 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.35040606025200177),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8999318228726032 + 0.4535050686223199,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_text`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedGreenIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.7705779383658 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1375878054688071),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5459336803835737 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedRedIcon`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.0340237553223 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.171502300030376),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.257253450045564 + 0.41470539810106805,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1319367296235 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.093651848960779),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4736275033501274 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_addContact`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1093190944257 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.168706231751583),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.321613880120848 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachActiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.4804082481894 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1678653853770982),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6353799021982454 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioBackground`,
      {
        red: 235,
        green: 96,
        blue: 96,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioText`,
      {
        red: 222,
        green: 71,
        blue: 71,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.6698126596145 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1584931072196305),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.665849140852372 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactBackground`,
      {
        red: 242,
        green: 192,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactText`,
      {
        red: 223,
        green: 160,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachEmptyImage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileBackground`,
      {
        red: 52,
        green: 185,
        blue: 241,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4026950937438 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2008731618867208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3895147704174038 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryBackground`,
      {
        red: 69,
        green: 157,
        blue: 245,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.3985026286234 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.171169396261046),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4594082522846927 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachHideBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.2437115348635 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.284473730628839),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.46147391160178985 + 0.34616781524554474,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationBackground`,
      {
        red: 54,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationText`,
      {
        red: 60,
        green: 171,
        blue: 47,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanBackground`,
      {
        red: 70,
        green: 70,
        blue: 70,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionImage`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionMark`,
      {
        red: 226,
        green: 80,
        blue: 80,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.3225800273522 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2220204361964529),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11608277784063614 + 0.12980412703220687,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPhotoBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollBackground`,
      {
        red: 242,
        green: 192,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollText`,
      {
        red: 223,
        green: 160,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachUnactiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.6515991715902 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19306314892842577),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1773409467479794 + 0.24289781160328416,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botButtonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.1837550040695 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05803509666059895),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1270453484829269 + 0.7439120228429225,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackgroundPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.5350330374667 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10039967384224247),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17758150264957753 + 0.5592238918982445,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.3393419836452 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6400629077297307),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13444720141408617 + 0.003120118982408562,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botSwitchToInlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2598215798345 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0991574034968212),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.081468133177443 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiBottomPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9450060609571 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18489442579155518),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15372095547884723 + 0.22364030464049703,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1935037442038 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05538312619487186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13585867725000392 + 0.8372432650024558,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackspace`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9450060609571 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18489442579155518),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15372095547884723 + 0.22364030464049703,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0057805659295 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1024978628052116),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4736275033501274 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelEmptyText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.8922561992394 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.20489699586898394),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1961849443955078 + 0.24686216585177853,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.564340589694 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.20852262421168083),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22813717021053012 + 0.27986201539633,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.362592902171 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1733075462182283),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3621162265790265 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3357999669755 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0283839655945266),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.445269360143967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelNewTrending`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0057805659295 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1024978628052116),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4736275033501274 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 18,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.1820544015953 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05850197803950155),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1255929851176809 + 0.7289791017684722,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelectorLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6102456372502 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0823837098479423),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5606378033471169 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.1553144709509 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29834946471581486),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2373624482882749 + 0.16360922893650193,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1534623567333 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1770925730598651),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2687167058713005 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.0800450640992 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15236287466347664),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20584546935257225 + 0.3879546184698047,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingDescription`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingTitle`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6796387202647 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10127447078905479),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23262401983775755 + 0.7251092222497306,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.667566434725 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3746916391848799),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.43152908475185064 + 0.18775037929503932,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_fieldOverlayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9222445938662 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1296262691492696),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1175268765417303 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintBackground`,
      {
        red: 17,
        green: 17,
        blue: 17,
        alpha: 204,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButton`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounter`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounterBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1015702602187 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.100353213038573),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.445269360143967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.8625228553217 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.21176600321952008),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18647833577057882 + 0.22365971140404733,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8819430211703 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13287313441213525),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3110502549192014 + 0.697695198671372,
            ),
          ),
        }),
        alpha: 63,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2981772650538 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3407517703908658),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03620224311105445 + 0.019333060752472202,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2981772650538 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3407517703908658),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03620224311105445 + 0.019333060752472202,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8819430211703 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13287313441213525),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3110502549192014 + 0.697695198671372,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8833924358833 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0437108263295283),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.445269360143967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.2961795679586 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4566154135111576),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9898983997757155 + 0.2542519994401403,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSelectedProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.8091654402627 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1564355171669959),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.4165296976693421 + 0.7585367434228856,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioTitleText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9080433608088 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9255834263204874),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.07833040573264172 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubble`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.6424761671365 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.20725993113281055),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5420247422410843 + 0.6708109846241119,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6561664356743 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.039676175925811),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.15492424270651553 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.2030641833769 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.021003025763515),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.06376274318671522 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inDownCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.9765956393015 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10926090303525189),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2680246273798233 + 0.7634496769105892,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -18.1157846724664 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4265314686344232),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0560323144872494 + 0.33195636234010606,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.2063814721719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4451871682476869),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6830710716950567 + 0.18973866114675816,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.2030641833769 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.021003025763515),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.06376274318671522 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgressSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -18.1157846724664 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4265314686344232),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0560323144872494 + 0.33195636234010606,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.1988569830604 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.685962409404866),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5751972958782 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2068175988761365),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inGreenCall`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.7705779383658 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1375878054688071),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5459336803835737 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.5651041791787 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1899671427793903),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3621162265790265 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.5651041791787 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1899671427793903),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3621162265790265 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1299436692744 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45375558883943284),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7040875719763888 + 0.184459911155708,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIcon`,
      {
        red: 252,
        green: 252,
        blue: 252,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.9765956393015 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10926090303525189),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2680246273798233 + 0.7634496769105892,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.2063814721719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4451871682476869),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6830710716950567 + 0.18973866114675816,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.9765956393015 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10926090303525189),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2680246273798233 + 0.7634496769105892,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.2063814721719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4451871682476869),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6830710716950567 + 0.18973866114675816,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.6424761671365 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.20725993113281055),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5420247422410843 + 0.6708109846241119,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.6198723109277 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19654041356352317),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2948106203452847 + 0.39373571300236143,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.7820299239263 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5953262893408642),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9871378626293006 + 0.066047623576469,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9222445938662 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1296262691492696),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1175268765417303 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.4489143303364 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1841985348873505),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.321613880120848 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.2493391255495 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.158163975837804),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5459336803835737 + 0),
          ),
        }),
        alpha: 235,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3330466344051 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1572795561956333),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.417232131193227 + 0),
          ),
        }),
        alpha: 235,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMessageText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6393760823502 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1857706475005974),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2043605826154917 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSiteNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.7522099548886 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1973926699811135),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1296999967337387 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inUpCall`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.0865738288878 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.149854077439718),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1175268765417303 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.1001745187335 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6433482596991665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9217023866485433 + 0.018652734322323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.1380085149789 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.14631558410237355),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3265604155591258 + 0.6484380071122439,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.1601267736486 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0913336284160402),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.445269360143967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.2961795679586 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4566154135111576),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9898983997757155 + 0.2542519994401403,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inlineResultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6056521254919 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0205305043080852),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.081468133177443 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_linkSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8956066527938 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0191192090051011),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3757757122866794 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `chat_lockIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaBroadcast`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaInfoText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhoto`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIconSelected`,
      {
        red: 217,
        green: 217,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoSelected`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 127,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaMenu`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentClock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaViews`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkIn`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.2910639995593 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2045717888124632),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9114177127473592 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkOut`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.0255253038822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2057337527188354),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.977404593150882 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCancelInlineBot`,
      {
        red: 173,
        green: 173,
        blue: 173,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3123851211831 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.060138917598333),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2687167058713005 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.5446064906019 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2138407391955659),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.25897203608390346 + 0.3061912353067571,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.8625228553217 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.21176600321952008),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18647833577057882 + 0.22365971140404733,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelPressedSend`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelSend`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8083111527654 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.033642371989896),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.487927243305535 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVideoFrame`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6428799023267 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1201306705042302),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.665849140852372 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2324171334119 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0357433643300233),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4736275033501274 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDelete`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDuration`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoicePressed`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextIn`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextOut`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.3758910173782 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5182168814208646),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0694252987336574 + 0.17104780926781335,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.9981564845321 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6257986043367738),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.3434744847099802 + 0.04898667075774136,
            ),
          ),
        }),
        alpha: 194,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.096224675056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8054118012606554),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3825625798711 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5873018850279913),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8029160111166366 + 0.06058088236447874,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerSelectedText`,
      {
        red: 53,
        green: 66,
        blue: 52,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerText`,
      {
        red: 53,
        green: 66,
        blue: 52,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.4283986838959 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7182776602089801),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5459336803835737 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.9981564845321 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6257986043367738),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.3434744847099802 + 0.04898667075774136,
            ),
          ),
        }),
        alpha: 137,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8157427468247 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.130581275409519),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.6220236501656 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0668297769176756),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.295007744998701 + 0),
          ),
        }),
        alpha: 71,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSelectedProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8658773793655 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8583114388602616),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6353799021982454 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioTitleText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.0603968972725 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9319083244026363),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.0708281829703149 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBroadcast`,
      {
        red: 70,
        green: 170,
        blue: 54,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubble`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2186077659822 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22674730955300698),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5929879998636732 + 0.6423561395060842,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.8603166432077 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39693327771054276),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.066374433266097 + 0.40460008343418585,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1355426118537 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2064284226299142),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.12264591836040326 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.7216146327709 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8852014106548055),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.08627680375844494 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5406267630633 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8575097771682445),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9006807807007775 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.9581428414049 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5797417092004942),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6018620484606976 + 0.050385543143424534,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.04569638913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4677067805236021),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.1686934077591071 + 0.2775821257242035,
            ),
          ),
        }),
        alpha: 178,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.4777381131347 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5931894199816478),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.551304879377101 + 0.1072891196054611,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.096224675056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8054118012606554),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2160575790617 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5788392804924406),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7097515239035905 + 0.06012808078055854,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.7216146327709 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8852014106548055),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.08627680375844494 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgressSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.4600278052421 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.43915999226892516),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.1798179043341015 + 0.34126001159661234,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1873141728537 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.178979353910875),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outGreenCall`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.7705779383658 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1375878054688071),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5459336803835737 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9128718437194 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2074238291703683),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2043605826154917 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8313440274885 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.190478888257809),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.321613880120848 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8157427468247 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.130581275409519),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8888440920252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1329092895287087),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.8160965812317 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4608203928837025),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.1409268995273039 + 0.2845562866510025,
            ),
          ),
        }),
        alpha: 196,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5169474358809 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7537899089291498),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9551098468083593 + 0),
          ),
        }),
        alpha: 130,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.8603166432077 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39693327771054276),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.066374433266097 + 0.40460008343418585,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.6631171616068 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5061528186813441),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9143857553993054 + 0.16190465801201495,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.007459039149 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8038288702216713),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5754231884675485 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1873141728537 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.178979353910875),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1873141728537 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.178979353910875),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6517363321876 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1266836082480847),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4312106966466258 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1887392343049 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1515302328346813),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3757757122866794 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6722470521948 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8098914094978251),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0696016255513074 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3825625798711 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5873018850279913),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8029160111166366 + 0.06058088236447874,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMessageText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.3415594621005 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1771621439347204),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.10543061880933 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7499871010855 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.195015309129008),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.417232131193227 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckRead`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7499871010855 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.195015309129008),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.417232131193227 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckReadSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0111570256824 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.19433615577354),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3621162265790265 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0111570256824 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.19433615577354),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3621162265790265 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3825625798711 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5873018850279913),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8029160111166366 + 0.06058088236447874,
            ),
          ),
        }),
        alpha: 220,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.096224675056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8054118012606554),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSiteNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.7225732535004 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1786118367889151),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.046097378471501 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.096224675056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8054118012606554),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3825625798711 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5873018850279913),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8029160111166366 + 0.06058088236447874,
            ),
          ),
        }),
        alpha: 247,
      } as Color,
    ] as [string, Color],
    [
      `chat_outUpCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.096224675056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8054118012606554),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.0492239342277 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5807906669739648),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6688915330401255 + 0.055221337433220136,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1873141728537 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.178979353910875),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3825625798711 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5873018850279913),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8029160111166366 + 0.06058088236447874,
            ),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.096224675056 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8054118012606554),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.9705879657689 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6021515480470586),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.1937177657528726 + 0.07140956632892426,
            ),
          ),
        }),
        alpha: 189,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8157427468247 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.130581275409519),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5902899635535706 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.5103938536402 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9436797488384229),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1666819193333249 + 0),
          ),
        }),
        alpha: 121,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewDurationText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewGameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordTime`,
      {
        red: 77,
        green: 76,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordVoiceCancel`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.3685995110399 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0684920032905012),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3757757122866794 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceDot`,
      {
        red: 218,
        green: 86,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPause`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPausePressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.9513178649558 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.34018615796384155),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8816474172504428 + 0.4724268854268069,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9824871761093 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7453694077367545),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.681206923025503 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgressInner`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.8625228553217 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.21176600321952008),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18647833577057882 + 0.22365971140404733,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.3268185982921 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.116463934560888),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.516768708179233 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelLine`,
      {
        red: 232,
        green: 232,
        blue: 232,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelMessage`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.0964759903928 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1568804447030805),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.308271358568257 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_reportSpam`,
      {
        red: 207,
        green: 89,
        blue: 87,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.7570241277393 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1457111453475635),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3895147704174038 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4241245637836 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1309919790153573),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3350354432152987 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretChatStatusText`,
      {
        red: 127,
        green: 127,
        blue: 127,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimeText`,
      {
        red: 228,
        green: 226,
        blue: 224,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.21828296086 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9959953258266774),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.48446753277199084 + 0),
          ),
        }),
        alpha: 204,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_selectedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6064993054423 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2071354700120125),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.988664642143454 + 0),
          ),
        }),
        alpha: 50,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentError`,
      {
        red: 219,
        green: 53,
        blue: 53,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceLink`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.3560179121124 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.67706352483178),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6829633293810461 + 0),
          ),
        }),
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.3560179121124 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.67706352483178),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6829633293810461 + 0),
          ),
        }),
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `chat_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.4897207713518 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29302526909154863),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7055630579305774 + 0.5023250006977623,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerViaBotNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickersHintPanel`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_textSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8956066527938 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0191192090051011),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3757757122866794 + 0),
          ),
        }),
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.1217659119566 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2283494514698491),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19823814267355014 + 0.21245884729222717,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8813138113096 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.107732937722712),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3895147704174038 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelMessage`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9064263661072 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1518286960184734),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3350354432152987 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartArrowIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.2063814721719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4451871682476869),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6830710716950567 + 0.18973866114675816,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.4105499192532 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1177314917035006),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.295007744998701 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_wallpaper`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6634193300018 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0473992002104642),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1419501182991265 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_wallpaper_gradient_to`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.6131687006207 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.549751422135086),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.100906450262533 + 0.13072367314992597,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.794723687283 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.015493154415989),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.321613880120848 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0275298933698 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.183222157995972),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9331146069257577 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.4390044574266 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.044597117829948),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.179163874765905 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadIcon`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadPressedBackground`,
      {
        red: 229,
        green: 229,
        blue: 229,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.794723687283 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.015493154415989),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.321613880120848 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePinBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2535697950915 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.27979188272841304),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3388422328808912 + 0.2615964785069613,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.0969399097478 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07850017887561342),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12734316285405747 + 0.5327265076901433,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackgroundActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2385542987429 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9957963528962789),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3350354432152987 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_attachMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4412555304021 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1842012953474643),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9662197093881829 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_date`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2431180402744 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.11630504673977957),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10387693293722132 + 0.2744528491359985,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_draft`,
      {
        red: 221,
        green: 75,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_mentionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloud`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloudBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5607464967083 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0454019205990255),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7105974027519577 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2017914837638 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9652577117628525),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8794292137265425 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.4078459984271 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18278554744286388),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15642540367864646 + 0.23120815728645872,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemText`,
      {
        red: 63,
        green: 63,
        blue: 63,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuName`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhone`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhoneCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0757882910674 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3425252527578726),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8717166542785864 + 0.46059192033261354,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1753818801259 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9874032956825886),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9662197093881829 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.6406943709482 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1404618769040151),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.29575541652975323 + 0),
          ),
        }),
        alpha: 77,
      } as Color,
    ] as [string, Color],
    [
      `chats_message`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.1190036994447 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07276895264037123),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05369837293823418 + 0.24469534159132475,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_messageArchived`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_message_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.2120997066775 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05414262636969424),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04118567296428049 + 0.2601531157397662,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3269096976406 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09468104791418167),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14041170653076243 + 0.4736138745784017,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_name`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameArchived`,
      {
        red: 82,
        green: 82,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameIcon`,
      {
        red: 36,
        green: 36,
        blue: 36,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4412555304021 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1842012953474643),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9662197093881829 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4412555304021 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1842012953474643),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9662197093881829 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1653995744265 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1838802702147526),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9551098468083593 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_onlineCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8578044363536 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1623860154012504),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6202681933573417 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedIcon`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedOverlay`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretIcon`,
      {
        red: 25,
        green: 177,
        blue: 38,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretName`,
      {
        red: 0,
        green: 166,
        blue: 14,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.7461432905986 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.204484217527605),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.417232131193227 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.3182552151967 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09693407584495607),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13567590311966665 + 0.4452422365925384,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentError`,
      {
        red: 213,
        green: 82,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentReadCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.3866808899058 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.204484217527605),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.417232131193227 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabletSelectedOverlay`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.4564791346892 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.18125213340319),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5754231884675485 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterMuted`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.0969399097478 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07850017887561342),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12734316285405747 + 0.5327265076901433,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2935481910297 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.162470084426295),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4033335328641325 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkbox`,
      {
        red: 94,
        green: 194,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.4405132572846 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.23658700174047512),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3428925361000551 + 0.34802873680332014,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3868669353432 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1196252300916352),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.321613880120848 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareDisabled`,
      {
        red: 176,
        green: 176,
        blue: 176,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareUnchecked`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteBackground`,
      {
        red: 85,
        green: 190,
        blue: 97,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.8795277050046 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5267359882280196),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.304124702810432 + 0.19343636157844427,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.8795277050046 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5267359882280196),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.304124702810432 + 0.19343636157844427,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner3`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.102290351911 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07711299764541774),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13067182978223582 + 0.5577977759913105,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3152779914516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1410343907557723),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4312106966466258 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter2`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter3`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3152779914516 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1410343907557723),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4312106966466258 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackgroundGray`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6243497085609 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1591679540417354),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5754231884675485 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1200389639499 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1473747726549683),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2427396874270544 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButtonSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `dialogCameraIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3868669353432 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1196252300916352),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.321613880120848 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareDisabled`,
      {
        red: 176,
        green: 176,
        blue: 176,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareUnchecked`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8014541396634 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.115885613076376),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6353799021982454 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8014541396634 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.115885613076376),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6353799021982454 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogGrayLine`,
      {
        red: 210,
        green: 210,
        blue: 210,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2891126470401 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19741309229189818),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08593338583653654 + 0.11404929550854731,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputField`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2108701130847 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1586693243519717),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5606378033471169 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7627279543289 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1083243555525213),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.321613880120848 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -18.5211950829591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22255215373219214),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5459359791068419 + 0.6082805445035395,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8956066527938 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0191192090051011),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3757757122866794 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `dialogProgressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0825733855558 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9326287819215505),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6559665078837437 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackground`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2108701130847 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1586693243519717),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5606378033471169 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRedIcon`,
      {
        red: 225,
        green: 77,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8014541396634 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.115885613076376),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6353799021982454 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogScrollGlow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.3091613036265 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.022164440199020575),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.055383920494518304 + 0.8991877786270411,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.2811676050347 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.033411180585803724),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08195995985810942 + 0.8673370958718334,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4861507589563 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22716603386521322),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23583366922376484 + 0.2547539710237731,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.582476607585 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2043465547018297),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23534414035634288 + 0.2972883575892043,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 18,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlack`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1858024687477 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1838632456417797),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2427396874270544 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1858024687477 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1838632456417797),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2427396874270544 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8250365884767 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1997512567102129),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.445269360143967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8250365884767 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1997512567102129),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.445269360143967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextHint`,
      {
        red: 151,
        green: 151,
        blue: 151,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextLink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.2614543971672 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1631225943220431),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.988664642143454 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed`,
      {
        red: 205,
        green: 90,
        blue: 90,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed2`,
      {
        red: 222,
        green: 58,
        blue: 58,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTopBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8876094910416 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9659548836231602),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4033335328641325 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.4078459984271 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18278554744286388),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15642540367864646 + 0.23120815728645872,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1935037442038 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05538312619487186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13585867725000392 + 0.8372432650024558,
            ),
          ),
        }),
        alpha: 246,
      } as Color,
    ] as [string, Color],
    [
      `dialog_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.3468074379093 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1567395895452381),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4033335328641325 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `divider`,
      {
        red: 217,
        green: 217,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `emptyListPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4934398491733 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0674595305997998),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2687167058713005 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollInactive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.0064192670226 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10171575590473633),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17423147923244808 + 0.5403164019928327,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.279880718667 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0947873099004422),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.487927243305535 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.620078701835 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1186017147763374),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2687167058713005 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.279880718667 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0947873099004422),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.487927243305535 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButton`,
      {
        red: 217,
        green: 87,
        blue: 87,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButtonPressed`,
      {
        red: 198,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_unread`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0057805659295 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1024978628052116),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4736275033501274 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIcon`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIconBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_iconText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `graySection`,
      {
        red: 246,
        green: 246,
        blue: 246,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_cursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4934398491733 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0674595305997998),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2687167058713005 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_hintText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.363166646719 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.25372691676574877),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.30727623039136753 + 0.2792210526361582,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.5152465828131 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.21974245960099506),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14534382455274064 + 0.16504999907612358,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanBackground`,
      {
        red: 242,
        green: 242,
        blue: 242,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanDelete`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerClose`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPerformer`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2981772650538 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3407517703908658),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03620224311105445 + 0.019333060752472202,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPlayPause`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.177746964295 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1299280475842015),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.487927243305535 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2981772650538 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3407517703908658),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03620224311105445 + 0.019333060752472202,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLock`,
      {
        red: 164,
        green: 164,
        blue: 164,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_graySectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0615047203737 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09111870052986473),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06621607805264018 + 0.23352668019310158,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_player_progressCachedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8919798596662 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1303931819374504),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3198635836862785 + 0.7345058938482092,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_other`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0679025061943 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.12524776946974842),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2191864621157759 + 0.5290249827595452,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_scrollUp`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8074203761122 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08110684327424708),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17583185322340217 + 0.7087782322303818,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `listSelectorSDK21`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `location_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.3468074379093 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1567395895452381),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4033335328641325 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_placeLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9164818740925 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1053576265688427),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4736275033501274 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationBackground`,
      {
        red: 255,
        green: 100,
        blue: 100,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0342176032195 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9303249683492093),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.179163874765905 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressInner`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4358870838681 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1842161889083351),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.4394357345175208 + 0.642568398652233,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressOuter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4507419182229 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.977148787647272),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1296999967337387 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3542292788678 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0541759474979295),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4736275033501274 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkbox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8375555166967 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1829103213880436),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.665849140852372 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3512775905329 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1282509383349373),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5459336803835737 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.4947535242424 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1240943761850801),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2687167058713005 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badge`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8375555166967 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1829103213880436),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.665849140852372 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_disabledButton`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_enabledButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7411681872508 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1972013346711763),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.445269360143967 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBar`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarItems`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSubtitle`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2981772650538 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3407517703908658),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03620224311105445 + 0.019333060752472202,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTop`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `player_background`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_button`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_buttonActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9164818740925 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1053576265688427),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4736275033501274 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholder`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholderBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1515309296403 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1008028514743116),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3757757122866794 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8919798596662 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1303931819374504),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3198635836862785 + 0.7345058938482092,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_time`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.7556001148875 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16980465857925495),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13913089854711422 + 0.22730491396492475,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.09037580617 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.165096605330394),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11272598792050824 + 0.1912126223133824,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionPressedBackground`,
      {
        red: 229,
        green: 229,
        blue: 229,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_creatorIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2567860999212 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1347423725707577),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1917233835046817 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4812282552116 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.35040606025200177),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8999318228726032 + 0.4535050686223199,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_title`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0189906360617 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6370656145948019),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.6065586825174167 + 0.041679127690797436,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2988821628077 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0433584296398464),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8584730605192255 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `progressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9634547293718 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.186312627466179),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5023076018021588 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackground`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2108701130847 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1586693243519717),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5606378033471169 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6109979593722 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1206085104277694),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3757757122866794 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sessions_devicesImage`,
      {
        red: 150,
        green: 150,
        blue: 150,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_actionMode`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0825733855558 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9326287819215505),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6559665078837437 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.1934016248424 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05538312619487186),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13585867725000392 + 0.8372432650024558,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholderText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.786212439141 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16030692845158434),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23502709227373253 + 0.4144993430954617,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_photoPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.9960231852495 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10844656712091459),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.270983431000147 + 0.778809863926371,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_startStopLoadIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1828142501467 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1595154573741817),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.531310691465977 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartActiveLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_blue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 9.2148108199367 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.162470084426295),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4033335328641325 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_golden`,
      {
        red: 227,
        green: 183,
        blue: 39,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_green`,
      {
        red: 97,
        green: 199,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_indigo`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 25.3996140775842 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9532857223281166),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.6052382561135394 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightblue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.068852041872 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0721609343872536),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.516768708179233 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightgreen`,
      {
        red: 143,
        green: 207,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_orange`,
      {
        red: 227,
        green: 183,
        blue: 39,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_red`,
      {
        red: 224,
        green: 83,
        blue: 86,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.6198723109277 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19654041356352317),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2948106203452847 + 0.39373571300236143,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menuSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `switch2Track`,
      {
        red: 245,
        green: 126,
        blue: 126,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switch2TrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7839589087438 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0863195352155681),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4594082522846927 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrack`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8515702255691 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.14034367659840272),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1851334937436382 + 0.38765334281665936,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.1446971651713 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3626070785306854),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3103142421784046 + 0.14528580323813886,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5898465282787 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0870220348469084),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4312106966466258 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.6971401658854 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4935571206573846),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11469594472538042 + 0.022461083569110397,
            ),
          ),
        }),
        alpha: 23,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelectorChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.5070605968688 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2084487008592149),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.3931762842252311 + 0),
          ),
        }),
        alpha: 33,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumb`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumbChecked`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5898465282787 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0870220348469084),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4312106966466258 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_background`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.7433807922154 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5901052496699933),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06269412389305445 + 0.004541573714505746,
            ),
          ),
        }),
        alpha: 234,
      } as Color,
    ] as [string, Color],
    [
      `undo_cancelColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.3004481726181 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9275713598974062),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.7910221409112714 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_infoColor`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_addressConfirmBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackgroundSelector`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 64,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.5608679991734 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1153056604305376),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.417232131193227 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5741364657899 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1682655749825668),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2043605826154917 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_commentText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_dateText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayBackground`,
      {
        red: 41,
        green: 41,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_graySettingsBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText`,
      {
        red: 119,
        green: 119,
        blue: 119,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText2`,
      {
        red: 102,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_greenText`,
      {
        red: 55,
        green: 168,
        blue: 24,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_pullBackground`,
      {
        red: 33,
        green: 33,
        blue: 33,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_redText`,
      {
        red: 219,
        green: 64,
        blue: 64,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_releaseBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5294364805019 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1397236402039546),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8900179967033705 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_statusText`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundCheckText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1097691539811 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0453516938299026),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2427396874270544 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGray`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGrayShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.2302630328878 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2824966113996707),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.33367188929938907 + 0.25335468115949555,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhite`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlackText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.473664191549 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1356857819489328),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1666819193333249 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueHeader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1118274395157 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1800073800525546),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2043605826154917 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.473664191549 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1356857819489328),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1666819193333249 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.703329405584 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.2073419509945862),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.034459356966788 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2567860999212 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1347423725707577),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1917233835046817 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.0715574415467 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1615894358179049),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8378111359964007 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7282512618768 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0122992039668466),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8073673178712785 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText5`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.664913906777 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0635162199131105),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0578114209258844 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9222445938662 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1296262691492696),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1175268765417303 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText7`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7620390361653 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1024219778890076),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7580817684769796 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.6806747155967 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18143776572918532),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.12584828409341578 + 0.187916672946074,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayLine`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.0678015757214 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0894381170159261),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06803454662149194 + 0.24516230516075752,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText5`,
      {
        red: 163,
        green: 163,
        blue: 163,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.028537687496 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09987629463374528),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05791990148684799 + 0.18352147975015412,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText7`,
      {
        red: 198,
        green: 198,
        blue: 198,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText8`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 23.610077366502 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.11049509439164384),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04995055955748836 + 0.140379985303913,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText`,
      {
        red: 38,
        green: 151,
        blue: 44,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText2`,
      {
        red: 55,
        green: 168,
        blue: 24,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteHintText`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputField`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2108701130847 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1586693243519717),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5606378033471169 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8956066527938 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0191192090051011),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3757757122866794 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1450832866431 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1632224783819063),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.034459356966788 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText`,
      {
        red: 205,
        green: 90,
        blue: 90,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText2`,
      {
        red: 219,
        green: 81,
        blue: 81,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText3`,
      {
        red: 210,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText4`,
      {
        red: 207,
        green: 48,
        blue: 48,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText5`,
      {
        red: 237,
        green: 57,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText6`,
      {
        red: 255,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteValueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.473664191549 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.1356857819489328),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1666819193333249 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
  ]);

export default blue;
