// This file was automatically generated by .attheme default theme
// generator, available at:
//     https://gitlab.com/snejugal/attheme-default-theme-generator

import Attheme from "..";
import { Color } from "../types";
import { PartialHsbColor, hsbToRgb } from "@snejugal/color";

/**
 * Generates the Mono theme.
 */
const mono = (accent: PartialHsbColor) =>
  new Attheme([
    [
      `actionBarActionModeDefault`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6733972657652 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15465581971974382),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.059100429877472604 + 0.12208450768636724,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultSelector`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultTop`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `actionBarBrowser`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefault`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1691472144436 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8110844673422871),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5869805206955564 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1535529090453 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3624259502999575),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21109264439106848 + 0.11056767339157622,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSearch`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.7184299513391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.35283890117767913),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14273019022578104 + 0.0792114147925543,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearch`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchArchivedPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3853509503887 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8714190361663026),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.4746106880331171 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItem`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3756864759279 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1716853435276423),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06687460307413938 + 0.12030227211185575,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubtitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.5624111434588 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29994800953157924),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6706793516118651 + 0.5116335074552983,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultTitle`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabActiveText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3853509503887 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8714190361663026),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.4746106880331171 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabUnactiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.5624111434588 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29994800953157924),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6706793516118651 + 0.5116335074552983,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarWhiteSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 47,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconBlue`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5940114934036 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.885847312737568),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6697301245777614 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.2883653126515 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8394610504944328),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7869423386469249 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.6930017168419 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2697961501723702),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.34587753333241006 + 0.3174625228408055,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchivedHidden`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.7689186956253 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9073974901061521),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5321058291583096 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundBlue`,
      {
        red: 84,
        green: 156,
        blue: 221,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundCyan`,
      {
        red: 95,
        green: 190,
        blue: 213,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGreen`,
      {
        red: 118,
        green: 200,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGroupCreateSpanBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5366920701112 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1572835392873794),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3516836878271499 + 0.7106741667730601,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2385537998984 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8615830532666536),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7046235301260402 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundOrange`,
      {
        red: 242,
        green: 140,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundPink`,
      {
        red: 242,
        green: 116,
        blue: 154,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundRed`,
      {
        red: 229,
        green: 101,
        blue: 85,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundSaved`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.7689186956253 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9073974901061521),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5321058291583096 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundViolet`,
      {
        red: 142,
        green: 133,
        blue: 238,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageBlue`,
      {
        red: 47,
        green: 131,
        blue: 196,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageCyan`,
      {
        red: 97,
        green: 192,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageGreen`,
      {
        red: 80,
        green: 178,
        blue: 50,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageOrange`,
      {
        red: 216,
        green: 123,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessagePink`,
      {
        red: 210,
        green: 104,
        blue: 149,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageRed`,
      {
        red: 202,
        green: 86,
        blue: 80,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageViolet`,
      {
        red: 128,
        green: 109,
        blue: 207,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5678020840994 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.30473959011583546),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7003399535876782 + 0.5189889615030139,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_text`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedGreenIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3159958905219 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9893323229342083),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedRedIcon`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1205975842101 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.14915136050327843),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20019835357092935 + 0.43342454652744544,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2185105585112 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9511222949227787),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_addContact`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.9772547344621 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0163952580433873),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachActiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5669820770772 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0156639944935313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioBackground`,
      {
        red: 235,
        green: 96,
        blue: 96,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7563864885022 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0075131531464832),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactBackground`,
      {
        red: 242,
        green: 192,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachEmptyImage`,
      {
        red: 204,
        green: 204,
        blue: 204,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileBackground`,
      {
        red: 52,
        green: 185,
        blue: 241,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryBackground`,
      {
        red: 69,
        green: 157,
        blue: 245,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachHideBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1571377059758 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.24739985378166635),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3591256688773338 + 0.3797471458420629,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationBackground`,
      {
        red: 54,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanBackground`,
      {
        red: 70,
        green: 70,
        blue: 70,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionImage`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionMark`,
      {
        red: 226,
        green: 80,
        blue: 80,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.4091538562399 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19308574935943776),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09033729575840163 + 0.13825093599729632,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPhotoBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollBackground`,
      {
        red: 242,
        green: 192,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachUnactiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.738173000478 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16790230405435708),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13800928832389647 + 0.25580209531128395,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botButtonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.2703288329572 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05047170575749991),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09886852670244883 + 0.7531565275705036,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackgroundPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.6216068663545 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08731514355786246),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.138196492403893 + 0.5721456797509937,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.425915812533 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5566470739964712),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10462875565148638 + 0.012903222448409045,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botSwitchToInlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3463954087222 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9559103412010516),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9677334441603106 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiBottomPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0315798898449 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16079816510564876),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11962786967780076 + 0.23482587039809302,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2800775730916 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.04816535183158958),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10572718655068652 + 0.847129075062549,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackspace`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0315798898449 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16079816510564876),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11962786967780076 + 0.23482587039809302,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0923543948173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9588154570535157),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelEmptyText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9788300281272 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1781939116354752),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15267395969394598 + 0.26113764045672416,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.6509144185818 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18134703203034286),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17753964371086017 + 0.29646250627405496,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7239809267167 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.020396908824059),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2188666377261512 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.4223737958632 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8943604112656987),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelNewTrending`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0923543948173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9588154570535157),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 18,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.2686282304831 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05087774108673243),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09773827653687292 + 0.738117924704815,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelectorLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.696819466138 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9413226696190824),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2418882998387 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2594672407303405),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.184718888467622 + 0.18088100080027902,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.0668885278455 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0236886541993198),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1352896583547398 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1666188929869 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13250626984141334),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16019191986393644 + 0.4029330449710845,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingDescription`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingTitle`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7662125491524 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08807593309105276),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18103137495074123 + 0.7420362005044917,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7541402636128 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.325860164812542),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.33582217175314516 + 0.2191507627936395,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_fieldOverlayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1643292350215 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.982408369298922),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintBackground`,
      {
        red: 17,
        green: 17,
        blue: 17,
        alpha: 204,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButton`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounter`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounterBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.9850035686691 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9569503075456632),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9490966842094 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18416771951710725),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14512013654745765 + 0.23722888081645,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9685168500581 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1155565188828069),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.24206380478711795 + 0.7203288927534679,
            ),
          ),
        }),
        alpha: 63,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9685168500581 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1155565188828069),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.24206380478711795 + 0.7203288927534679,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.0777632905738 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8341142153721661),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -22.3827533968464 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39710726993103707),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7703532442519061 + 0.32628234565766673,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSelectedProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8957392691504 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13604814753130898),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3241494319008345 + 0.7888456906237318,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioTitleText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.9946171896966 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8049572936953923),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.070092637033519 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubble`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.6685636360184 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15391148692001422),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3634356717513368 + 0.7554810862384587,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5695926067866 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9041809707200148),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.13863133492228846 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1164903544891 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8879413882124029),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.05705701090969173 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inDownCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0631694681893 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09502153810554277),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20858063947596692 + 0.782952594290157,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.2023585013542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.37094399802811895),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.821819612683911 + 0.4087989688607822,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2929553010597 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38716840421955734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5315757821753601 + 0.2394425962137505,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1164903544891 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8879413882124029),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.05705701090969173 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgressSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.2023585013542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.37094399802811895),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.821819612683911 + 0.4087989688607822,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.2854308119482 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5965647492699596),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8007387944656061 + 0.05871109781008005,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0 + 360) % 360,
          saturation: Math.max(0, Math.min(1, accent.saturation * 1)),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inGreenCall`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3159958905219 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9893323229342083),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.5214696497091 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.034885352956254),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2188666377261512 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.5214696497091 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.034885352956254),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2188666377261512 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2165174981622 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3946201502800875),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5479311264998014 + 0.2356931201278689,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIcon`,
      {
        red: 252,
        green: 252,
        blue: 252,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0631694681893 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09502153810554277),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20858063947596692 + 0.782952594290157,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2929553010597 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38716840421955734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5315757821753601 + 0.2394425962137505,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0631694681893 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09502153810554277),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20858063947596692 + 0.782952594290157,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2929553010597 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38716840421955734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5315757821753601 + 0.2394425962137505,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8957392691504 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13604814753130898),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3241494319008345 + 0.7888456906237318,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7064461398155 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.17092639615727845),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22942588640850792 + 0.4151877236904138,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.8686037528141 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5177407299075953),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7682049543394257 + 0.13787709822328909,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1643292350215 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.982408369298922),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.3623405014486 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0298685356007125),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.3359129544373 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0072269156244495),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 235,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.3359129544373 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0072269156244495),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 235,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMessageText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1643292350215 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.982408369298922),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSiteNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1952118534554 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9800708354519855),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9050438348961733 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inUpCall`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0 + 360) % 360,
          saturation: Math.max(0, Math.min(1, accent.saturation * 1)),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -21.1867483476213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5595042643425289),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7172821210240417 + 0.08572077083481491,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.2245823438666 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.12724708897685696),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.25413403600533296 + 0.6722003041307992,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.0777632905738 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8341142153721661),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -22.3827533968464 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39710726993103707),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7703532442519061 + 0.32628234565766673,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inlineResultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6922259543796 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8875304478464029),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9677334441603106 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_linkSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9821804816816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8863030787996047),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `chat_lockIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaBroadcast`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaInfoText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhoto`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIconSelected`,
      {
        red: 217,
        green: 217,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoSelected`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 127,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaMenu`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentClock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaViews`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkIn`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.9634476533275 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0340884089573037),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.731474352009956 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkOut`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.7095911334546 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.043110553897909),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7497011065980528 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCancelInlineBot`,
      {
        red: 173,
        green: 173,
        blue: 173,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3989589500709 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9219769172440159),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1352896583547398 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.6311803194897 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1859720667092879),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2015357820691073 + 0.3250354373218405,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9490966842094 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18416771951710725),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14512013654745765 + 0.23722888081645,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelPressedSend`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelSend`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8948849816532 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8989335188439035),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVideoFrame`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.7294537312145 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.974150279136575),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.649226023363 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0030273136454757),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDelete`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDuration`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoicePressed`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextIn`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextOut`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.462464846266 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4506805616367723),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8322422266276982 + 0.2488649615523509,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.0847303134199 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5442417578152058),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0455112646918947 + 0.14674511979655022,
            ),
          ),
        }),
        alpha: 194,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1827985039437 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7004469671960439),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4691364087589 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5107621015143821),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6248408464602453 + 0.11900538156301298,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerSelectedText`,
      {
        red: 53,
        green: 66,
        blue: 52,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerText`,
      {
        red: 53,
        green: 66,
        blue: 52,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.5149725127837 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6246685334267004),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.2962052347526978 + 0.054376487486525134,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.0847303134199 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5442417578152058),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0455112646918947 + 0.14674511979655022,
            ),
          ),
        }),
        alpha: 137,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9023165757124 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9832389149124802),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.7085974790534 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9277957941351085),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1588157494754832 + 0),
          ),
        }),
        alpha: 71,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSelectedProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9524512082533 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.74645248966842),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioTitleText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1469707261603 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8104579030389988),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.06337940004583868 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBroadcast`,
      {
        red: 70,
        green: 170,
        blue: 54,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubble`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.7092285605282 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.23707132987300863),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5648480945367246 + 0.6386592588097747,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.5466016341299 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38192671651586024),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9181513480940944 + 0.4271099252262097,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2221164407414 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0492013258901214),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.10974762301909027 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8081884616587 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7698380412111144),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.07720333673355123 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1827985039437 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7004469671960439),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4691364087589 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5107621015143821),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6248408464602453 + 0.11900538156301298,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1322702180178 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.40675316085759766),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9094941040484855 + 0.3626225609871583,
            ),
          ),
        }),
        alpha: 223,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.5643119420225 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5158823468300013),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.207247882128841 + 0.2201704290163947,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1827985039437 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7004469671960439),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4691364087589 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5107621015143821),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6248408464602453 + 0.11900538156301298,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8081884616587 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7698380412111144),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.07720333673355123 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgressSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.5466016341299 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38192671651586024),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9181513480940944 + 0.4271099252262097,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1007403439659 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0253295414110355),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outGreenCall`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3159958905219 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9893323229342083),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.9179178563763 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0353304054967976),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.9179178563763 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0353304054967976),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9023165757124 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9832389149124802),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.975417920913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9852635319181208),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.9026704101195 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4007642377629099),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8878858059617695 + 0.36757628102664835,
            ),
          ),
        }),
        alpha: 196,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6035212647686 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6555526685677799),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8404157725335962 + 0.008890249410530859,
            ),
          ),
        }),
        alpha: 130,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.5466016341299 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38192671651586024),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9181513480940944 + 0.4271099252262097,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.7496909904946 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.44018874099951144),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7115882128198034 + 0.22844029697527557,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.0940328680367 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6990703307427396),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.409740760188974 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1007403439659 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0253295414110355),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1007403439659 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0253295414110355),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7383101610753 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9798492090029155),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2806946541416644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7383101610753 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9798492090029155),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2806946541416644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.7588208810826 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7043427730422467),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9571149007720234 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4691364087589 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5107621015143821),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6248408464602453 + 0.11900538156301298,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMessageText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2171911514692 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0263886507444584),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.03288556544498 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7216868041431 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.02253548701205),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5321058291583096 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckRead`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7216868041431 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.02253548701205),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5321058291583096 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckReadSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.656982741954 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0341097324405357),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.436420268549664 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.656982741954 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0341097324405357),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.436420268549664 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4691364087589 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5107621015143821),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6248408464602453 + 0.11900538156301298,
            ),
          ),
        }),
        alpha: 220,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1827985039437 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7004469671960439),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSiteNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6359994246127 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0250099207485786),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9360825233203579 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1827985039437 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7004469671960439),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4691364087589 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5107621015143821),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6248408464602453 + 0.11900538156301298,
            ),
          ),
        }),
        alpha: 247,
      } as Color,
    ] as [string, Color],
    [
      `chat_outUpCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1827985039437 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7004469671960439),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4691364087589 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5107621015143821),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6248408464602453 + 0.11900538156301298,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1007403439659 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0253295414110355),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4691364087589 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5107621015143821),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6248408464602453 + 0.11900538156301298,
            ),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1827985039437 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7004469671960439),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0571617946567 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.523676490662031),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9289684211806134 + 0.1582709088390982,
            ),
          ),
        }),
        alpha: 226,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9023165757124 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9832389149124802),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4230440421037933 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.596967682528 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8206952232927105),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0439855575945596 + 0),
          ),
        }),
        alpha: 121,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewDurationText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewGameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordTime`,
      {
        red: 77,
        green: 76,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordVoiceCancel`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2820256821521 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.929241391803055),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceDot`,
      {
        red: 218,
        green: 86,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPause`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPausePressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.0378916938435 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29585159076993933),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6861107648209922 + 0.5365803063442728,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0690610049971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6482295643951667),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.4627943912321624 + 0.025959967164563405,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgressInner`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9490966842094 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18416771951710725),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14512013654745765 + 0.23722888081645,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.2402447694043 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9709614084656927),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelLine`,
      {
        red: 232,
        green: 232,
        blue: 232,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelMessage`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.009902161505 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0061106599534853),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1706844694570566 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_reportSpam`,
      {
        red: 207,
        green: 89,
        blue: 87,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6704502988515 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9963969931720562),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2433837606817657 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6624492651042 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.983596093804912),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretChatStatusText`,
      {
        red: 127,
        green: 127,
        blue: 127,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimeText`,
      {
        red: 228,
        green: 226,
        blue: 224,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1317091319722 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8661928025201036),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.4335175671758441 + 0),
          ),
        }),
        alpha: 204,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_selectedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5199254765545 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.049816227725033),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8846898118485972 + 0),
          ),
        }),
        alpha: 66,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentError`,
      {
        red: 219,
        green: 53,
        blue: 53,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.323274576956 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8101780859011489),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.4746106880331171 + 0),
          ),
        }),
        alpha: 59,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceLink`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4425917410002 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5888256067581547),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.539780704953829 + 0.04452423135089029,
            ),
          ),
        }),
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4425917410002 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5888256067581547),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.539780704953829 + 0.04452423135089029,
            ),
          ),
        }),
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `chat_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.5624111434588 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29994800953157924),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6706793516118651 + 0.5116335074552983,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerViaBotNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickersHintPanel`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_textSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9821804816816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8863030787996047),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.2083397408444 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19858993932368826),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15427178827407173 + 0.22688372367704654,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.9678876401974 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9633682738154102),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2433837606817657 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelMessage`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.7263572511476 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9783773044918782),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1470175191491547 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartArrowIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2929553010597 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38716840421955734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5315757821753601 + 0.2394425962137505,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.3239760903655 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9720637719459656),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1588157494754832 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_wallpaper`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.576845501114 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9108974962654555),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0218547242756038 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_wallpaper_gradient_to`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.6997425295084 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4781053813012262),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8567413138254852 + 0.21083156380161833,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4767633185955 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8698821165786329),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6895069719467 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9441867481153985),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.695803198355629 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.7555414915165 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.908027849969702),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0777016713391938 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadIcon`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadPressedBackground`,
      {
        red: 242,
        green: 242,
        blue: 242,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3251281276306 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8660197606234817),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePinBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3401436239793 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.24332816504108226),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2636919237858112 + 0.2862524667912744,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.1835137386356 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06826968779412695),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.0991002901511394 + 0.5419926829975191,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackgroundActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3251281276306 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8660197606234817),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_attachMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6895069719467 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9441867481153985),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.695803198355629 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_date`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3296918691622 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10114765779562751),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08083853081210854 + 0.28201149499821837,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_draft`,
      {
        red: 221,
        green: 75,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_mentionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloud`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloudBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.647320325596 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9091605109813002),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.6358660517865611 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.2883653126515 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8394610504944328),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7869423386469249 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.17940672784 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2275217702731027),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1717399105764522 + 0.2068298115061919,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemText`,
      {
        red: 68,
        green: 68,
        blue: 68,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuName`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhone`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhoneCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.2742075337829 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4853299379291665),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.1667325628464715 + 0.2720050931062502,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.2883653126515 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8394610504944328),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7869423386469249 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.5541205420604 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.991831832647308),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.264651725822461 + 0),
          ),
        }),
        alpha: 77,
      } as Color,
    ] as [string, Color],
    [
      `chats_message`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.2055775283325 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06328538035226144),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04178885006116795 + 0.24860272480856727,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_messageArchived`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_message_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.2986735355652 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.04708651943927443),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.032051286063216285 + 0.2631500074242978,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4134835265284 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08234179429532475),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10927041975361013 + 0.48383098760403753,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_name`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameArchived`,
      {
        red: 82,
        green: 82,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameIcon`,
      {
        red: 36,
        green: 36,
        blue: 36,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6895069719467 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9441867481153985),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.695803198355629 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.2055775283325 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06328538035226144),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04178885006116795 + 0.24860272480856727,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived_threeLines`,
      {
        red: 94,
        green: 94,
        blue: 94,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.0971266459833 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19211707318072532),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03077113668016065 + 0.047425968148532546,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_onlineCircle`,
      {
        red: 75,
        green: 203,
        blue: 28,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedIcon`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedOverlay`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretIcon`,
      {
        red: 25,
        green: 177,
        blue: 38,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretName`,
      {
        red: 0,
        green: 166,
        blue: 14,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.6162537609829 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9825248300556875),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4498695533581991 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2540658725879 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9498659449327004),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1120445633243332 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentError`,
      {
        red: 213,
        green: 82,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentReadCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.6162537609829 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9825248300556875),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4498695533581991 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabletSelectedOverlay`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.4724649503169 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0357252377608563),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3443145156840979 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterMuted`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.1835137386356 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06826968779412695),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.0991002901511394 + 0.5419926829975191,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8440199577753 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.009782729848568),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.268186171574644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkbox`,
      {
        red: 94,
        green: 194,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.5270870861723 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.20575393554916396),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.26684392830040965 + 0.37297944699366764,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4734407642309 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9737107099577446),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareDisabled`,
      {
        red: 176,
        green: 176,
        blue: 176,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareUnchecked`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteBackground`,
      {
        red: 85,
        green: 190,
        blue: 97,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.9661015338924 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45808942070358855),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0148886955941063 + 0.288331508267789,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.9661015338924 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45808942070358855),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0148886955941063 + 0.288331508267789,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner3`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.1888641807988 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06706329016732164),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10169070687242837 + 0.5673061630563111,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3588144112213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.020396908824059),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2188666377261512 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter2`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter3`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackgroundGray`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.8479246612639 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.000281725386234),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5182158184593622 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6599183634768 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9375889229813917),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9677334441603106 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButtonSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `dialogCameraIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4734407642309 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9737107099577446),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareDisabled`,
      {
        red: 176,
        green: 176,
        blue: 176,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareUnchecked`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.8880279685511 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.970458456399114),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.8880279685511 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.970458456399114),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogGrayLine`,
      {
        red: 210,
        green: 210,
        blue: 210,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3756864759279 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1716853435276423),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06687460307413938 + 0.12030227211185575,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputField`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2974439419724 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.007666404881463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1691472144436 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8110844673422871),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5869805206955564 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgressBackground`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9821804816816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8863030787996047),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `dialogProgressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1691472144436 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8110844673422871),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5869805206955564 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackground`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2974439419724 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.007666404881463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRedIcon`,
      {
        red: 225,
        green: 77,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.8880279685511 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.970458456399114),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogScrollGlow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.3957351325143 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.019275872159685032),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04310056753502035 + 0.9032178113748545,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.3677414339224 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.02905688751410749),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06378242553958667 + 0.8733009445717523,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5727245878441 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19756074994404899),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1835291705002462 + 0.2719145006779136,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.6690504364728 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1777152063997814),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18314821205919918 + 0.31441326648285883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 18,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlack`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.7251548452565 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0025825065513643),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9360825233203579 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.343359928809 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9868577194572306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0663934877276133 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.8479246612639 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.000281725386234),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5182158184593622 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8277420161385 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0411767529118847),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.3949122332418 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9860094948368314),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8546638714981222 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray2`,
      {
        red: 117,
        green: 117,
        blue: 117,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray3`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray4`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextHint`,
      {
        red: 151,
        green: 151,
        blue: 151,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextLink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.015016387341 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0102059544845179),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7497011065980528 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed`,
      {
        red: 205,
        green: 90,
        blue: 90,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed2`,
      {
        red: 222,
        green: 58,
        blue: 58,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTopBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.9741833199294 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8400673638293039),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.3849094628432 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22889458168741245),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1033506878358662 + 0.12333403663872226,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2800775730916 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.04816535183158958),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10572718655068652 + 0.847129075062549,
            ),
          ),
        }),
        alpha: 246,
      } as Color,
    ] as [string, Color],
    [
      `dialog_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.433381266797 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0059881616638275),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `divider`,
      {
        red: 217,
        green: 217,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `emptyListPlaceholder`,
      {
        red: 149,
        green: 149,
        blue: 149,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5800136780611 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9283434755274522),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1352896583547398 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollInactive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0929930959103 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08845970797548341),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13558945575418205 + 0.5529944240746428,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3664545475548 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9521097775624814),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6470392169871 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9728931720371653),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1706844694570566 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.3664545475548 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9521097775624814),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButton`,
      {
        red: 217,
        green: 87,
        blue: 87,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButtonPressed`,
      {
        red: 198,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_unread`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0923543948173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9588154570535157),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIcon`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIconBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_iconText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `graySection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.0986500046573 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0670643482963933),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1472121471888143 + 0.8212441027741577,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_cursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5800136780611 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9283434755274522),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1352896583547398 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_hintText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.6018204117009 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19110464876576067),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11310866529489504 + 0.17562599960858769,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanBackground`,
      {
        red: 242,
        green: 242,
        blue: 242,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanDelete`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerClose`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPerformer`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPlayPause`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.8948849816532 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8989335188439035),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLock`,
      {
        red: 164,
        green: 164,
        blue: 164,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_graySectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.5649956296915 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.26395497095311016),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17967130258452677 + 0.17104096409657968,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_player_progressCachedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.978553688554 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.11339976480127444),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.24892246463535564 + 0.7577808932628175,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_other`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0186713226935 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10892492528149916),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17057407328392749 + 0.5449741718439717,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_scrollUp`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.893994205 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0705366401403218),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1368348899282621 + 0.7215727061547973,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `listSelectorSDK21`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `location_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.433381266797 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0059881616638275),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_placeLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.0030557029802 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.961302523734184),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationBackground`,
      {
        red: 255,
        green: 100,
        blue: 100,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0523562256683 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8090808969610167),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0551548240297495 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressInner`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5224609127559 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16020831905776567),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3419752408959255 + 0.6745441126293661,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressOuter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5373157471107 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8498024286899134),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0108929104503321 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.4408031077556 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9167910678241654),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkbox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9241293455845 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0287482077916612),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4378514194207 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9812122776892851),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5813273531302 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9775974171331421),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1352896583547398 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badge`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9241293455845 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0287482077916612),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_disabledButton`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_enabledButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.8277420161385 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0411767529118847),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBar`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarItems`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSubtitle`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTop`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `player_background`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_button`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_buttonActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.0030557029802 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.961302523734184),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholder`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholderBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2381047585281 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9573413471084745),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.978553688554 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.11339976480127444),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.24892246463535564 + 0.7577808932628175,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_time`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.8421739437752 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.14767496320693535),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10827367646592452 + 0.23742882849410754,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.1769496350578 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.14358048431501896),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08772499331824364 + 0.199415173140282,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionPressedBackground`,
      {
        red: 242,
        green: 242,
        blue: 242,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_creatorIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.343359928809 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9868577194572306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0663934877276133 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5678020840994 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.30473959011583546),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7003399535876782 + 0.5189889615030139,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_title`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.1055644649495 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5540404013814533),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.2502471904579004 + 0.15858100180911291,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7876916660801 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.907383336816967),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7681900798447318 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `progressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.1691472144436 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8110844673422871),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.5869805206955564 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackground`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2974439419724 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.007666404881463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6975717882599 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9745658448443589),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sessions_devicesImage`,
      {
        red: 150,
        green: 150,
        blue: 150,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_actionMode`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.3609541860954 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.910688077294257),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.722458971519089 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.2799754537301 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.04816535183158958),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10572718655068652 + 0.847129075062549,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholderText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.8727862680288 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13941501934621664),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18290148065820078 + 0.4316011818607443,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_photoPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.0825970141372 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09431333005522172),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21088322322449818 + 0.7985280798145633,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_startStopLoadIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2693880790345 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0084022660996916),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.370267439298401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7064461398155 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.17092639615727845),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22942588640850792 + 0.4151877236904138,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menuSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `switch2Track`,
      {
        red: 245,
        green: 126,
        blue: 126,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switch2TrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.8705327376315 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9447455607883597),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.305926759274855 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrack`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9381440544569 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.12205346691546637),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14407356104163324 + 0.40112465427027516,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.2312709940591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3153505176396571),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.24149102903274555 + 0.1678659410638028,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.4086538743146 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9704923789853885),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9153222497531271 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.7837139947732 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.42923457014332306),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.0892580421806453 + 0.030806979077363857,
            ),
          ),
        }),
        alpha: 23,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelectorChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.420486767981 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0509583125103708),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.3518271394437906 + 0),
          ),
        }),
        alpha: 33,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumb`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumbChecked`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.8705327376315 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9447455607883597),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.305926759274855 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_background`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8299546211032 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5132001192568107),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04878947349292429 + 0.009103536286467056,
            ),
          ),
        }),
        alpha: 234,
      } as Color,
    ] as [string, Color],
    [
      `undo_cancelColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.3870220015059 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.806686150961651),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_infoColor`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_addressConfirmBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackgroundSelector`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 64,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6474418280612 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9699540857513796),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.268186171574644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4875626369021 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0160120296167008),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0777016713391938 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_commentText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_dateText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayBackground`,
      {
        red: 41,
        green: 41,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_graySettingsBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText`,
      {
        red: 119,
        green: 119,
        blue: 119,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText2`,
      {
        red: 102,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_greenText`,
      {
        red: 55,
        green: 168,
        blue: 24,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_pullBackground`,
      {
        red: 33,
        green: 33,
        blue: 33,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_redText`,
      {
        red: 219,
        green: 64,
        blue: 64,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_releaseBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4428626516142 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9911898062245256),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7964175317712242 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_statusText`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundCheckText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1963429828689 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9091168299872434),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1120445633243332 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGray`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGrayShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.3168368617756 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2456804014894497),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.25966828767041833 + 0.27763444736048826,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhite`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlackText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6052670111401 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0328680590544979),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0439855575945596 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueHeader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.343359928809 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9868577194572306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0663934877276133 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5429801695612 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0024870030406885),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8155899812875 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.965368288853696),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9784203916677084 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.343359928809 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9868577194572306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0663934877276133 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.015016387341 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0102059544845179),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7497011065980528 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8148250907645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8803718870318283),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.722458971519089 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText5`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.4216599221108 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9249140745590532),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1643292350215 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.982408369298922),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText7`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.848612865053 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9587494617957756),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.678356632301247 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.7672485444845 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15779199229625496),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09793695389028223 + 0.19707407281275147,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayLine`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.6111792622188 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2696002517928263),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.19766797163066682 + 0.18165032906959755,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText2`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText3`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText4`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText5`,
      {
        red: 163,
        green: 163,
        blue: 163,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText6`,
      {
        red: 117,
        green: 117,
        blue: 117,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText7`,
      {
        red: 198,
        green: 198,
        blue: 198,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText8`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.5235035376142 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0960948841766721),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03887224751148972 + 0.14401465740713112,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText`,
      {
        red: 38,
        green: 151,
        blue: 44,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText2`,
      {
        red: 55,
        green: 168,
        blue: 24,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteHintText`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputField`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2974439419724 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.007666404881463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9821804816816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8863030787996047),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.015016387341 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0102059544845179),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7497011065980528 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText`,
      {
        red: 205,
        green: 90,
        blue: 90,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText2`,
      {
        red: 219,
        green: 81,
        blue: 81,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText3`,
      {
        red: 210,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText4`,
      {
        red: 207,
        green: 48,
        blue: 48,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText5`,
      {
        red: 237,
        green: 57,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText6`,
      {
        red: 255,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteValueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.343359928809 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9868577194572306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0663934877276133 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
  ]);

export default mono;
