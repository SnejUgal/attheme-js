// This file was automatically generated by .attheme default theme
// generator, available at:
//     https://gitlab.com/snejugal/attheme-default-theme-generator

import Attheme from "..";
import { Color } from "../types";
import { PartialHsbColor, hsbToRgb } from "@snejugal/color";

/**
 * Generates the Mono theme.
 */
const mono = (accent: PartialHsbColor) =>
  new Attheme([
    [
      `actionBarActionModeDefault`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6733972657652 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15465581971974382),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.059100429877472604 + 0.12208450768636724,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultSelector`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarActionModeDefaultTop`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `actionBarBrowser`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefault`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchived`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.2697881098951 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.27707811775332397),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.023713873781232388 + 0.020804796902349265,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSearch`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSearchPlaceholder`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8911577275913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.36848503557994994),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.031536982042715024 + 0.015923487207398033,
            ),
          ),
        }),
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultArchivedTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.4667387063773 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.28177396582599473),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.030608423660181683 + 0.02608776037011191,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.2499617212162 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4732570775117384),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10587405878808752 + 0.02699774365704233,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearch`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchArchivedPlaceholder`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSearchPlaceholder`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 136,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8911577275913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.36848503557994994),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.031536982042715024 + 0.015923487207398033,
            ),
          ),
        }),
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItem`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubmenuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3756864759279 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1716853435276423),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06687460307413938 + 0.12030227211185575,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultSubtitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarDefaultTitle`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabActiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4919305717272 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0479280039222743),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.3729205414923 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0216641335211352),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8911577275913 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.36848503557994994),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.031536982042715024 + 0.015923487207398033,
            ),
          ),
        }),
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `actionBarTabUnactiveText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `actionBarWhiteSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.852376648125 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3734050819216843),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.0757416014002963 + 0.03711645226832244,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconCyan`,
      {
        red: 129,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconGreen`,
      {
        red: 129,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconOrange`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconPink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.5235035376142 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10300737514746304),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.054361185209617996 + 0.18560697331395462,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconRed`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarIconViolet`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1978737719334 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.36519674986477946),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.047830006889785254 + 0.024636246609670374,
            ),
          ),
        }),
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorCyan`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorGreen`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorOrange`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorPink`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorRed`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_actionBarSelectorViolet`,
      {
        red: 123,
        green: 123,
        blue: 123,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarBlue`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarCyan`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarGreen`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarOrange`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarPink`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarRed`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundActionBarViolet`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchived`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.6930017168419 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2697961501723702),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.34587753333241006 + 0.3174625228408055,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundArchivedHidden`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5229038953709 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9911553155934005),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundBlue`,
      {
        red: 80,
        green: 165,
        blue: 230,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundCyan`,
      {
        red: 95,
        green: 190,
        blue: 213,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGreen`,
      {
        red: 118,
        green: 200,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundGroupCreateSpanBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5366920701112 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1572835392873794),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3516836878271499 + 0.7106741667730601,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundInProfileBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.3374576373206 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.010727819141865),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3443145156840979 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundOrange`,
      {
        red: 242,
        green: 140,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundPink`,
      {
        red: 242,
        green: 116,
        blue: 154,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundRed`,
      {
        red: 229,
        green: 101,
        blue: 85,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundSaved`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5229038953709 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9911553155934005),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_backgroundViolet`,
      {
        red: 142,
        green: 133,
        blue: 238,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageBlue`,
      {
        red: 37,
        green: 134,
        blue: 214,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageCyan`,
      {
        red: 55,
        green: 158,
        blue: 184,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageGreen`,
      {
        red: 80,
        green: 178,
        blue: 50,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageOrange`,
      {
        red: 216,
        green: 123,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessagePink`,
      {
        red: 203,
        green: 79,
        blue: 134,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageRed`,
      {
        red: 202,
        green: 86,
        blue: 80,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_nameInMessageViolet`,
      {
        red: 131,
        green: 111,
        blue: 230,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileBlue`,
      {
        red: 141,
        green: 141,
        blue: 141,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileCyan`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileGreen`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileOrange`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfilePink`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileRed`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_subtitleInProfileViolet`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `avatar_text`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedGreenIcon`,
      {
        red: 47,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `calls_callReceivedRedIcon`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.1205975842101 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.14915136050327843),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20019835357092935 + 0.43342454652744544,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `changephoneinfo_image2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.5302405344579 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9597290044800558),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_TextSelectionCursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5181355654707 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.922378980570897),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_addContact`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.7446386394954 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.036410162964112),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_adminText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachActiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5669820770772 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0156639944935313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioBackground`,
      {
        red: 235,
        green: 96,
        blue: 96,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachAudioText`,
      {
        red: 222,
        green: 71,
        blue: 71,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7563864885022 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0075131531464832),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactBackground`,
      {
        red: 242,
        green: 192,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachContactText`,
      {
        red: 223,
        green: 160,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachEmptyImage`,
      {
        red: 204,
        green: 204,
        blue: 204,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileBackground`,
      {
        red: 52,
        green: 185,
        blue: 241,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachFileText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4892689226315 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0443700513378207),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2433837606817657 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryBackground`,
      {
        red: 69,
        green: 157,
        blue: 245,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachGalleryText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.3119287997356 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0185374120416995),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.305926759274855 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationBackground`,
      {
        red: 54,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachLocationText`,
      {
        red: 60,
        green: 171,
        blue: 47,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanBackground`,
      {
        red: 70,
        green: 70,
        blue: 70,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachMediaBanText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionImage`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionMark`,
      {
        red: 255,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPermissionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -20.4091538562399 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19308574935943776),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09033729575840163 + 0.13825093599729632,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPhotoBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollBackground`,
      {
        red: 242,
        green: 192,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachPollText`,
      {
        red: 223,
        green: 160,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachSendBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.4922169604025 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.999075666488237),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5321058291583096 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_attachUnactiveTab`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.738173000478 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16790230405435708),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13800928832389647 + 0.25580209531128395,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botButtonText`,
      {
        red: 45,
        green: 45,
        blue: 45,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.2703288329572 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05047170575749991),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09886852670244883 + 0.7531565275705036,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonBackgroundPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.6216068663545 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08731514355786246),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.138196492403893 + 0.5721456797509937,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botKeyboardButtonText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.425915812533 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5566470739964712),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10462875565148638 + 0.012903222448409045,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botProgress`,
      {
        red: 53,
        green: 53,
        blue: 53,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_botSwitchToInlineText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.7818553049349 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0109718330648252),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_editDoneIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.7567683915781 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0453412434957943),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5884054666565128 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiBottomPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0315798898449 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16079816510564876),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11962786967780076 + 0.23482587039809302,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2800775730916 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.04816535183158958),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10572718655068652 + 0.847129075062549,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBackspace`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0315798898449 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16079816510564876),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11962786967780076 + 0.23482587039809302,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7647623553082 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9797826519421061),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.436420268549664 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelEmptyText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9788300281272 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1781939116354752),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15267395969394598 + 0.26113764045672416,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.6509144185818 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18134703203034286),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17753964371086017 + 0.29646250627405496,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7239809267167 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.020396908824059),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2188666377261512 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelMasksIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.4223737958632 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8943604112656987),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelNewTrending`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.9556166342423 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9937551073572641),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 18,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelector`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.2686282304831 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.05087774108673243),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09773827653687292 + 0.738117924704815,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerPackSelectorLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.696819466138 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9413226696190824),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2418882998387 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2594672407303405),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.184718888467622 + 0.18088100080027902,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.2160091539306 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9909605972175046),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelStickerSetNameIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1666188929869 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13250626984141334),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.16019191986393644 + 0.4029330449710845,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingDescription`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiPanelTrendingTitle`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.7662125491524 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08807593309105276),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18103137495074123 + 0.7420362005044917,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_emojiSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7541402636128 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.325860164812542),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.33582217175314516 + 0.2191507627936395,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_fieldOverlayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1768526992785 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0129675600300567),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.268186171574644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintBackground`,
      {
        red: 17,
        green: 17,
        blue: 17,
        alpha: 204,
      } as Color,
    ] as [string, Color],
    [
      `chat_gifSaveHintText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButton`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounter`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonCounterBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.7606528492682 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0134108858968605),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9490966842094 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18416771951710725),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14512013654745765 + 0.23722888081645,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_goDownButtonShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioCacheSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.94223121608 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22336290575121467),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.46789290069631884 + 0.5794204816183346,
            ),
          ),
        }),
        alpha: 63,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioPerfomerText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0239828367324 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10357641859476432),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1837379064541934 + 0.6232652326960139,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.9881691902635 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9464120830449038),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0239828367324 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10357641859476432),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1837379064541934 + 0.6232652326960139,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioSelectedProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inAudioTitleText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.9624402579055 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.26324497598195684),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.018704764618461715 + 0.017885802180283322,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubble`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleSelected`,
      {
        red: 234,
        green: 234,
        blue: 234,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inBubbleShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5695926067866 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9041809707200148),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.13863133492228846 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.8985415315253 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0163628491540253),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactNameText`,
      {
        red: 50,
        green: 50,
        blue: 50,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inDownCall`,
      {
        red: 0,
        green: 200,
        blue: 83,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9374995135647 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6782722389993217),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -19.2023585013542 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.37094399802811895),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.821819612683911 + 0.4087989688607822,
            ),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2929553010597 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38716840421955734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5315757821753601 + 0.2394425962137505,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileNameText`,
      {
        red: 41,
        green: 41,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileProgressSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.6978914354351 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6667845922760866),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8948330648606627 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inForwardedNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.8857557615871 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0094437468022592),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1236320466605323 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inGreenCall`,
      {
        red: 47,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstant`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.4437724860513 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0415109102696747),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1706844694570566 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inInstantSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.4437724860513 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0415109102696747),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1706844694570566 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0000998715521 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9797669674637507),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.476987752064242 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -10.2165174981622 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3946201502800875),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5479311264998014 + 0.2356931201278689,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIcon`,
      {
        red: 252,
        green: 252,
        blue: 252,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0631694681893 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09502153810554277),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20858063947596692 + 0.782952594290157,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2929553010597 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.38716840421955734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5315757821753601 + 0.2394425962137505,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLoaderSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.2453555403252 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0126760862952742),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0631694681893 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09502153810554277),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.20858063947596692 + 0.782952594290157,
            ),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_inLocationIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -16.8465115812979 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1574692081138234),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15217101160763596 + 0.3070290958279027,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMediaIconSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7064461398155 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.17092639615727845),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22942588640850792 + 0.4151877236904138,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7064461398155 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.17092639615727845),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22942588640850792 + 0.4151877236904138,
            ),
          ),
        }),
        alpha: 228,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5618067970645 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0418123860579915),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1236320466605323 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewInstantText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.3408311868579 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0416867190905457),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1120445633243332 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inPreviewLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1347365779757 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9987024405878354),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.3026772117588 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9857659530985297),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyMessageText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.9031680147426 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0100080978950763),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4269250626705 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22500815490398582),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.29859363333961086 + 0.3657008011017325,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSentClockSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4269250626705 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22500815490398582),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.29859363333961086 + 0.3657008011017325,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inSiteNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.6777050057737 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0346168337444792),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0777016713391938 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTextSelectionHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.308462688965 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8989245732355168),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 81,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.864624186267 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08858550547070838),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06783754481719942 + 0.27621883709067657,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inUpCall`,
      {
        red: 255,
        green: 72,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViaBotNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.8857557615871 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0094437468022592),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1236320466605323 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.1144917035579 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08370201134253985),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07369717530166411 + 0.3202684772322664,
            ),
          ),
        }),
        alpha: 239,
      } as Color,
    ] as [string, Color],
    [
      `chat_inViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.1144917035579 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08370201134253985),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07369717530166411 + 0.3202684772322664,
            ),
          ),
        }),
        alpha: 240,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.4957524099021 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15793952227713473),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21929944605902127 + 0.4407462721725365,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarFill`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.4623922763641 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0072269156244495),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.4957524099021 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15793952227713473),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21929944605902127 + 0.4407462721725365,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_inlineResultIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5228875081742 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0142385460644616),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_linkSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.700644046426 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.838343193924212),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 61,
      } as Color,
    ] as [string, Color],
    [
      `chat_lockIcon`,
      {
        red: 45,
        green: 45,
        blue: 45,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaBroadcast`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaInfoText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhoto`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoIconSelected`,
      {
        red: 217,
        green: 217,
        blue: 217,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaLoaderPhotoSelected`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaMenu`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaSentClock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaTimeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_mediaViews`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkIn`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.1688673224653 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0430793234109856),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9465646358317218 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageLinkOut`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCancelInlineBot`,
      {
        red: 173,
        green: 173,
        blue: 173,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelCursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.5007225597549 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9705763291008348),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2067147639848401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.6311803194897 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1859720667092879),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.2015357820691073 + 0.3250354373218405,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9490966842094 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18416771951710725),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14512013654745765 + 0.23722888081645,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelPressedSend`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelSend`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.9485740399568 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9854232010523217),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3443145156840979 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 229,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelText`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVideoFrame`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.7463676168703 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0026738400475037),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4173391217994 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0034878927629303),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2806946541416644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDelete`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceDuration`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoicePressed`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messagePanelVoiceShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextIn`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_messageTextOut`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_muteIcon`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioCacheSeekbar`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 43,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioDurationText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioPerfomerText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.0814526020039 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9526400595266987),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0218547242756038 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8956224049581 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6574209007079045),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.4164990601175151 + 0.012430045015964423,
            ),
          ),
        }),
        alpha: 101,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarFill`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8956224049581 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6574209007079045),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.4164990601175151 + 0.012430045015964423,
            ),
          ),
        }),
        alpha: 100,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioSelectedProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.0814526020039 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9526400595266987),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0218547242756038 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outAudioTitleText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBroadcast`,
      {
        red: 70,
        green: 170,
        blue: 54,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubble`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.4010658049436 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0123104614287908),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0663934877276133 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleGradient`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3835801237459 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9025604277795433),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.9182251748581 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9638230937739326),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0218547242756038 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outBubbleShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.0673060360478 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.034674705345024),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.2403354312411216 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.7535444242195 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.035073868948099),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outContactPhoneText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8656341254379 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7739784353931849),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2806946541416644 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.8656341254379 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7739784353931849),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2806946541416644 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2404345240479 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39522383318742854),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5125689573042422 + 0.21965676165206682,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.7535444242195 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.035073868948099),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileProgressSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.7535444242195 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.035073868948099),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outFileSelectedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2853417475545 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6217940808531),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.7606718248129088 + 0.03425223110847629,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outForwardedNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outGreenCall`,
      {
        red: 47,
        green: 199,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstant`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outInstantSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoader`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhoto`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9624409050213 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.40276104929809486),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5283906469584495 + 0.2160296263365456,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.2957674512311 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10462828401969719),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22754604513040974 + 0.7626814549474645,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderPhotoSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.2404345240479 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.39522383318742854),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.5125689573042422 + 0.21965676165206682,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLoaderSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.4172979635788 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7040273257480959),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.305926759274855 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chat_outLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 228,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.7535444242195 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.035073868948099),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMediaIconSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.8104766150124 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.036821324727159),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.4674042032093 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7035110200299782),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outMenuSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.4674042032093 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.7035110200299782),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantSelectedText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewInstantText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outPreviewLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyLine`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMediaMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyMessageText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outReplyNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 245,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckRead`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 245,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckReadSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 245,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentCheckSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 245,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClock`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 112,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSentClockSelected`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 112,
      } as Color,
    ] as [string, Color],
    [
      `chat_outSiteNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTextSelectionHighlight`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4724363349579 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8765380710487795),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 150,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.2395862061896 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.41751550355512085),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0037067475571584 + 0.3737267446673187,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outUpCall`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoSelectedText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueInfoText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVenueNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2700459234501 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9412458891307656),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0551548240297495 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViaBotNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViews`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outViewsSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.27890135699 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45197978141878253),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0865588283706678 + 0.3220303278718263,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbar`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4008960807097 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6390782404030096),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.46870324611453 + 0.03956070054920837,
            ),
          ),
        }),
        alpha: 230,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarFill`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_outVoiceSeekbarSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4008960807097 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6390782404030096),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.46870324611453 + 0.03956070054920837,
            ),
          ),
        }),
        alpha: 229,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewDurationText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_previewGameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordTime`,
      {
        red: 77,
        green: 76,
        blue: 75,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordVoiceCancel`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.2449176533427 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9597290044800558),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceDot`,
      {
        red: 243,
        green: 70,
        blue: 70,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPause`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoicePlayPausePressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.0378916938435 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29585159076993933),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6861107648209922 + 0.5365803063442728,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.0690610049971 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.6482295643951667),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.4627943912321624 + 0.025959967164563405,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_recordedVoiceProgressInner`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.9490966842094 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.18416771951710725),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14512013654745765 + 0.23722888081645,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.1132088779435 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9731656263646178),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelLine`,
      {
        red: 232,
        green: 232,
        blue: 232,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelMessage`,
      {
        red: 52,
        green: 52,
        blue: 52,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_replyPanelName`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.1781676069134 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.028741981632427),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2433837606817657 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_reportSpam`,
      {
        red: 245,
        green: 64,
        blue: 76,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelIcons`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6733972657652 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15465581971974382),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.059100429877472604 + 0.12208450768636724,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_searchPanelText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6733972657652 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15465581971974382),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.059100429877472604 + 0.12208450768636724,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretChatStatusText`,
      {
        red: 127,
        green: 127,
        blue: 127,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -14.8207100744901 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.242636996561528),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.452536351897802 + 0.49345745894006093,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.0874497034253 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.44827596475110126),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09321764311053284 + 0.02833634493027423,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_secretTimerText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_selectedBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 8,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentError`,
      {
        red: 255,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 244,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceBackgroundSelected`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 16,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.606692788121 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5863498990364628),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09391488526725893 + 0.00802677004829418,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceLink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1131058895711 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0264692728198885),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_serviceText`,
      {
        red: 56,
        green: 56,
        blue: 56,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4425917410002 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5888256067581547),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.539780704953829 + 0.04452423135089029,
            ),
          ),
        }),
        alpha: 102,
      } as Color,
    ] as [string, Color],
    [
      `chat_shareBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.4425917410002 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5888256067581547),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.539780704953829 + 0.04452423135089029,
            ),
          ),
        }),
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `chat_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.3636009477241 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0506455383809434),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1120445633243332 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.4788520399974 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0091068953522713),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1588157494754832 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyMessageText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerReplyNameText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.7052055466026 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.017932519886918),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1352896583547398 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickerViaBotNameText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_stickersHintPanel`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_textSelectBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.0624259666564 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8116847423773262),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 99,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.2083397408444 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19858993932368826),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15427178827407173 + 0.22688372367704654,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelLine`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.5561963284025 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9868718821528567),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5884054666565128 + 0),
          ),
        }),
        alpha: 234,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -18.8714698498241 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.15978195971254197),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.09608970738953872 + 0.1902021132712334,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_topPanelTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.8199682804772 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9827740460787543),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartArrowIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.4203893485288 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.431330152003492),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.9912651602644348 + 0.3374631555968323,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.0040544920467 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0081378689530152),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.268186171574644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_unreadMessagesStartText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chat_wallpaper`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.5786736502634 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9464120830449038),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6338680460774 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.017732418249476),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8646053438806066 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.6444823277099 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0056952785715207),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.801943617365 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9915717965944141),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.476987752064242 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_actionUnreadPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.9025807949868 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0211377239212822),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.6783411054835 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9521615633966881),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.436420268549664 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePinBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.4271329505095 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.21454998053612398),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.321824970804186 + 0.4231543568412763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.1835137386356 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06826968779412695),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.0991002901511394 + 0.5419926829975191,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archivePullDownBackgroundActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3251281276306 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8660197606234817),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_archiveText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_attachMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6338680460774 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.017732418249476),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8646053438806066 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_date`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3296918691622 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10114765779562751),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.08083853081210854 + 0.28201149499821837,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_draft`,
      {
        red: 227,
        green: 34,
        blue: 70,
        alpha: 250,
      } as Color,
    ] as [string, Color],
    [
      `chats_mentionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloud`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuCloudBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.4852156331611 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9682112776087887),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0108929104503321 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.2883653126515 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8394610504944328),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7869423386469249 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3078578919307 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10598810783325512),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07545463317310415 + 0.24905756832993187,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuItemText`,
      {
        red: 68,
        green: 68,
        blue: 68,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuName`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhone`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 195,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuPhoneCats`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopBackgroundCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.6962888151361 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8936363439468791),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0777016713391938 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopShadow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.0506863784294 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0147388741128502),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.3697991917482252 + 0),
          ),
        }),
        alpha: 41,
      } as Color,
    ] as [string, Color],
    [
      `chats_menuTopShadowCats`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.0288402736235 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0273288368735143),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 0,
      } as Color,
    ] as [string, Color],
    [
      `chats_message`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.2055775283325 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06328538035226144),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04178885006116795 + 0.24860272480856727,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_messageArchived`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_message_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.2986735355652 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.04708651943927443),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.032051286063216285 + 0.2631500074242978,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_muteIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.4134835265284 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08234179429532475),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10927041975361013 + 0.48383098760403753,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_name`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameArchived`,
      {
        red: 82,
        green: 82,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameIcon`,
      {
        red: 36,
        green: 36,
        blue: 36,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.6338680460774 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.017732418249476),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.8646053438806066 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessageArchived_threeLines`,
      {
        red: 145,
        green: 145,
        blue: 145,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_nameMessage_threeLines`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.0971266459833 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19211707318072532),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03077113668016065 + 0.047425968148532546,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_onlineCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.0040964935754 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0246292174533325),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2806946541416644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedIcon`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_pinnedOverlay`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 6,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretIcon`,
      {
        red: 25,
        green: 177,
        blue: 38,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_secretName`,
      {
        red: 0,
        green: 166,
        blue: 14,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1418409695302 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.04126037081325),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentClock`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -12.4575372712361 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4847009499986564),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.6580134098469036 + 0.15413720076940293,
            ),
          ),
        }),
        alpha: 123,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentError`,
      {
        red: 255,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentErrorIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_sentReadCheck`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1391161390045 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.04126037081325),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabUnreadActiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.3729205414923 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0216641335211352),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabUnreadUnactiveBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.3729205414923 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0216641335211352),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_tabletSelectedOverlay`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.1486853185598 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0338831624358313),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterMuted`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.1835137386356 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06826968779412695),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.0991002901511394 + 0.5419926829975191,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_unreadCounterText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.8995429836617 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9591424960662286),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5043995435958752 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `chats_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkbox`,
      {
        red: 94,
        green: 194,
        blue: 69,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxDisabled`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.5270870861723 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.20575393554916396),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.26684392830040965 + 0.37297944699366764,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4734407642309 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9737107099577446),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1826237989109307 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareDisabled`,
      {
        red: 176,
        green: 176,
        blue: 176,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `checkboxSquareUnchecked`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteBackground`,
      {
        red: 85,
        green: 190,
        blue: 97,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contacts_inviteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.9661015338924 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.45808942070358855),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 1.0148886955941063 + 0.288331508267789,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.7846798246862 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.4298107638119164),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.952237850783366 + 0.327423153934673,
            ),
          ),
        }),
        alpha: 206,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner3`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressInner4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.1888641807988 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.06706329016732164),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10169070687242837 + 0.5673061630563111,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter1`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.004018590752 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.002924057465861),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4498695533581991 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.2699693838806 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9911553155934005),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter3`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `contextProgressOuter4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.004018590752 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.002924057465861),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4498695533581991 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBackgroundGray`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0732773088111 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0228269984137903),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.370267439298401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogBadgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.7108562545684 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0247825364888468),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3443145156840979 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogButtonSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `dialogCameraIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.6824394792512 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0323326173197898),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareDisabled`,
      {
        red: 176,
        green: 176,
        blue: 176,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogCheckboxSquareUnchecked`,
      {
        red: 115,
        green: 115,
        blue: 115,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.0564820298185 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9811482015083535),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8114103144999 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0210640486317124),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogFloatingIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogGrayLine`,
      {
        red: 210,
        green: 210,
        blue: 210,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.3756864759279 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1716853435276423),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06687460307413938 + 0.12030227211185575,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputField`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2974439419724 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.007666404881463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.7226442352508 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0327763478427505),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2806946541416644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.8688696450131 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3821184522281873),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.8702074180470631 + 0.4043315753299977,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9821804816816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8863030787996047),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 51,
      } as Color,
    ] as [string, Color],
    [
      `dialogProgressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.1388715618642 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9812454560827146),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3443145156840979 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackground`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRadioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.22899431166 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0314975369466814),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRedIcon`,
      {
        red: 225,
        green: 77,
        blue: 77,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8114103144999 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0210640486317124),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogRoundCheckBoxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogScrollGlow`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.3957351325143 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.019275872159685032),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04310056753502035 + 0.9032178113748545,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -17.3677414339224 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.02905688751410749),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.06378242553958667 + 0.8733009445717523,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchHint`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5727245878441 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19756074994404899),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1835291705002462 + 0.2719145006779136,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.6690504364728 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.1777152063997814),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18314821205919918 + 0.31441326648285883,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogSearchText`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogShadowLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 18,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlack`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.4888937543092 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0323982723543108),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0777016713391938 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.2878649807031 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0345573184069126),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1352896583547398 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.0991189861747 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0381353177772572),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextBlue4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.7427385106862 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0465519852057417),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.7598656133507 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.007383239124557),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1588157494754832 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray2`,
      {
        red: 117,
        green: 117,
        blue: 117,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray3`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextGray4`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextHint`,
      {
        red: 151,
        green: 151,
        blue: 151,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextLink`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.4115952416882 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0304041355451714),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed`,
      {
        red: 230,
        green: 85,
        blue: 94,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTextRed2`,
      {
        red: 235,
        green: 85,
        blue: 93,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialogTopBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.9741833199294 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8400673638293039),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.3078578919307 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10598810783325512),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.07545463317310415 + 0.24905756832993187,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `dialog_inlineProgressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2800775730916 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.04816535183158958),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.10572718655068652 + 0.847129075062549,
            ),
          ),
        }),
        alpha: 246,
      } as Color,
    ] as [string, Color],
    [
      `dialog_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.433381266797 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0059881616638275),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `divider`,
      {
        red: 230,
        green: 230,
        blue: 230,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `emptyListPlaceholder`,
      {
        red: 149,
        green: 149,
        blue: 149,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2180972969088 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.986719635156152),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.370267439298401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollInactive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0929930959103 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08845970797548341),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.13558945575418205 + 0.5529944240746428,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `fastScrollText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.5302405344579 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9597290044800558),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addButtonPressed`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6470392169871 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9728931720371653),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1706844694570566 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_addedIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.4798636002163 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0177324182494762),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonProgress`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButton`,
      {
        red: 217,
        green: 87,
        blue: 87,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_delButtonPressed`,
      {
        red: 198,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `featuredStickers_unread`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.0923543948173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9588154570535157),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIcon`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_folderIconBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `files_iconText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `graySection`,
      {
        red: 246,
        green: 246,
        blue: 246,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_checkbox`,
      {
        red: 81,
        green: 208,
        blue: 76,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_cursor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6531956794311 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0141802678416707),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_hintText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.4497404756067 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.22066010091532734),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.23912680434387873 + 0.30158012833980763,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_sectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.6018204117009 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19110464876576067),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.11310866529489504 + 0.17562599960858769,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanBackground`,
      {
        red: 242,
        green: 242,
        blue: 242,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanDelete`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `groupcreate_spanText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerClose`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -15.2083397408444 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.19858993932368826),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.15427178827407173 + 0.22688372367704654,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPerformer`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerPlayPause`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9142407473211 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0388879296890614),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `inappPlayerTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0804728220095 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09121982708093362),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.004653166650846158 + 0.018315618690012185,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_changephoneinfo_changeText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0686712084915 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.004938162543146),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLock`,
      {
        red: 164,
        green: 164,
        blue: 164,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_chat_messagePanelVoiceLockShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_graySectionText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.0537680172173 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.097080896086025),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.059314613689353625 + 0.21714212474116182,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_player_progressCachedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.978553688554 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.11339976480127444),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.24892246463535564 + 0.7577808932628175,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_other`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0186713226935 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.10892492528149916),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.17057407328392749 + 0.5449741718439717,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `key_sheet_scrollUp`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.893994205 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0705366401403218),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.1368348899282621 + 0.7215727061547973,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `listSelector`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 78,
      } as Color,
    ] as [string, Color],
    [
      `listSelectorSDK21`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `location_liveLocationProgress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.433381266797 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0059881616638275),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_placeLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.0030557029802 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.961302523734184),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationBackground`,
      {
        red: 255,
        green: 100,
        blue: 100,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLiveLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.5587834011028 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9612851351746576),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `location_sendLocationIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressInner`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -8.5224609127559 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.16020831905776567),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.3419752408959255 + 0.6745441126293661,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `login_progressOuter`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.5373157471107 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8498024286899134),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0108929104503321 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.7967153659071 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9905922534146443),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5884054666565128 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_buttonIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkbox`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5871452354279 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9959418461674157),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5884054666565128 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `musicPicker_checkboxCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.4378514194207 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9812122776892851),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3833525732889576 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeBackgroundSelected`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.5813273531302 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9775974171331421),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1352896583547398 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `passport_authorizeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badge`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.344783380203 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0135341069965031),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4906568923044297 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_badgeText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_disabledButton`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `picker_enabledButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.9091065291479 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0304560932502356),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4633920100955866 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBar`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarItems`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarSubtitle`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTitle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -9.3847510939415 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.29634349007970534),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.028173108913112505 + 0.02196733120460258,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_actionBarTop`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 153,
      } as Color,
    ] as [string, Color],
    [
      `player_background`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_button`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_buttonActive`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.3374373445386 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0270905328406026),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5884054666565128 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholder`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_placeholderBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progress`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.8053088467187 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.036155628099922),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4498695533581991 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_progressBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.978553688554 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.11339976480127444),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.24892246463535564 + 0.7577808932628175,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `player_time`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.3587049084345 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.24687356078109116),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.257663119771389 + 0.273382055041971,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.801943617365 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9915717965944141),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.476987752064242 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionIcon`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_actionPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 5.9025807949868 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0211377239212822),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.194633857349959 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_creatorIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.6482472292264 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.047912173937705),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5884054666565128 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_status`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.5720223895489 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0398406035161092),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2433837606817657 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_title`,
      {
        red: 54,
        green: 54,
        blue: 54,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.1576809833864 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9441424736611754),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.331446495416769 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `profile_verifiedCheck`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `progressCircle`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.7104310590417 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0010178949012738),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5884054666565128 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackground`,
      {
        red: 179,
        green: 179,
        blue: 179,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `radioBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.3726324329361 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0379105245867726),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.4498695533581991 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.843647476541 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9540448044426143),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `returnToCallText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sessions_devicesImage`,
      {
        red: 150,
        green: 150,
        blue: 150,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_actionMode`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholder`,
      {
        red: 244,
        green: 244,
        blue: 244,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_linkPlaceholderText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -11.8727862680288 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.13941501934621664),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.18290148065820078 + 0.4316011818607443,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_photoPlaceholder`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.0825970141372 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.09431333005522172),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.21088322322449818 + 0.7985280798145633,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `sharedMedia_startStopLoadIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.2693880790345 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0084022660996916),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.370267439298401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartActiveLine`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 20,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_blue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 8.1282369910489 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0109718330648252),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_golden`,
      {
        red: 227,
        green: 183,
        blue: 39,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_green`,
      {
        red: 97,
        green: 199,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_indigo`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 24.3130402486964 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8290493037609753),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.436420268549664 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightblue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.0177217870158 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9324321715452303),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_lightgreen`,
      {
        red: 158,
        green: 212,
        blue: 72,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_orange`,
      {
        red: 227,
        green: 183,
        blue: 39,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `statisticChartLine_red`,
      {
        red: 224,
        green: 83,
        blue: 86,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menu`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -4.7064461398155 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.17092639615727845),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.22942588640850792 + 0.4151877236904138,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `stickers_menuSelector`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 15,
      } as Color,
    ] as [string, Color],
    [
      `switch2Track`,
      {
        red: 245,
        green: 116,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switch2TrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.4411414245829 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9540448044426143),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.357254791824771 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchThumbChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 6.7567683915781 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0453412434957943),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.5884054666565128 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrack`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.9381440544569 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.12205346691546637),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.14407356104163324 + 0.40112465427027516,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlue`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -7.2312709940591 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.3153505176396571),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.24149102903274555 + 0.1678659410638028,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.6586154399467 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0538725775493762),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.9571149007720234 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelector`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 78,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueSelectorChecked`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 78,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumb`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackBlueThumbChecked`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `switchTrackChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.5425826701837 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0022000089530647),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.476987752064242 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_background`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.8299546211032 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.5132001192568107),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04878947349292429 + 0.009103536286467056,
            ),
          ),
        }),
        alpha: 234,
      } as Color,
    ] as [string, Color],
    [
      `undo_cancelColor`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -5.3870220015059 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.806686150961651),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.602665831584939 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `undo_infoColor`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_addressConfirmBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 13,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackground`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackBackgroundSelector`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 64,
      } as Color,
    ] as [string, Color],
    [
      `wallet_blackText`,
      {
        red: 34,
        green: 34,
        blue: 34,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.6474418280612 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9699540857513796),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.268186171574644 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonPressedBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4875626369021 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0160120296167008),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0777016713391938 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_buttonText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_commentText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_dateText`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayBackground`,
      {
        red: 41,
        green: 41,
        blue: 41,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_graySettingsBackground`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText`,
      {
        red: 119,
        green: 119,
        blue: 119,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_grayText2`,
      {
        red: 102,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_greenText`,
      {
        red: 55,
        green: 168,
        blue: 24,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_pullBackground`,
      {
        red: 33,
        green: 33,
        blue: 33,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_redText`,
      {
        red: 219,
        green: 64,
        blue: 64,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_releaseBackground`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 0.4428626516142 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9911898062245256),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 0.7964175317712242 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_statusText`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteBackground`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `wallet_whiteText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundCheckText`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundChecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.1963429828689 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9091168299872434),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1120445633243332 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGray`,
      {
        red: 240,
        green: 240,
        blue: 240,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundGrayShadow`,
      {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundUnchecked`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -6.3168368617756 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.2456804014894497),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.25966828767041833 + 0.27763444736048826,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhite`,
      {
        red: 255,
        green: 255,
        blue: 255,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlackText`,
      {
        red: 51,
        green: 51,
        blue: 51,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueButton`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.8944023109612 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0353720498008094),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.318650615285761 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueHeader`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.481945073595 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0282364875193113),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2188666377261512 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.5268952008012 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.985818653170569),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.476987752064242 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 3.5698851608386 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0308135318524374),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText2`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.343359928809 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9868577194572306),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.0663934877276133 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText3`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.5256663555051 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0077051709502194),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.1236320466605323 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText4`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 2.2160091539306 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9909605972175046),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.293274811086835 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText5`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.7326530304043 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0031794215673682),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.409740760188974 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText6`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -0.1643292350215 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.982408369298922),
          ),
          brightness: Math.max(0, Math.min(1, accent.brightness * 1 + 0)),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteBlueText7`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.4104931295115 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.9681481546126831),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2067147639848401 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayIcon`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -13.1392895547506 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.08128005479815434),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.04966059487883142 + 0.2231658500994138,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayLine`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -1.1546496864391 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.07778214537889046),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.05294546765905342 + 0.25011286569202906,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText2`,
      {
        red: 138,
        green: 138,
        blue: 138,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText3`,
      {
        red: 153,
        green: 153,
        blue: 153,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText4`,
      {
        red: 128,
        green: 128,
        blue: 128,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText5`,
      {
        red: 163,
        green: 163,
        blue: 163,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText6`,
      {
        red: 117,
        green: 117,
        blue: 117,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText7`,
      {
        red: 198,
        green: 198,
        blue: 198,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGrayText8`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 22.5235035376142 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.0960948841766721),
          ),
          brightness: Math.max(
            0,
            Math.min(
              1,
              accent.brightness * 0.03887224751148972 + 0.14401465740713112,
            ),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText`,
      {
        red: 38,
        green: 151,
        blue: 44,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteGreenText2`,
      {
        red: 4,
        green: 172,
        blue: 53,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteHintText`,
      {
        red: 168,
        green: 168,
        blue: 168,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputField`,
      {
        red: 219,
        green: 219,
        blue: 219,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteInputFieldActivated`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -3.2974439419724 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.007666404881463),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.3965103087065127 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkSelection`,
      {
        ...hsbToRgb({
          hue: (accent.hue + -2.9821804816816 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 0.8863030787996047),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2310895971863507 + 0),
          ),
        }),
        alpha: 33,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteLinkText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 4.7818553049349 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0109718330648252),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.2557492462345534 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText`,
      {
        red: 205,
        green: 90,
        blue: 90,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText2`,
      {
        red: 228,
        green: 69,
        blue: 82,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText3`,
      {
        red: 210,
        green: 73,
        blue: 73,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText4`,
      {
        red: 207,
        green: 48,
        blue: 48,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText5`,
      {
        red: 237,
        green: 57,
        blue: 57,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteRedText6`,
      {
        red: 255,
        green: 102,
        blue: 102,
        alpha: 255,
      } as Color,
    ] as [string, Color],
    [
      `windowBackgroundWhiteValueText`,
      {
        ...hsbToRgb({
          hue: (accent.hue + 1.810659309871 + 360) % 360,
          saturation: Math.max(
            0,
            Math.min(1, accent.saturation * 1.0331839528497626),
          ),
          brightness: Math.max(
            0,
            Math.min(1, accent.brightness * 1.305926759274855 + 0),
          ),
        }),
        alpha: 255,
      } as Color,
    ] as [string, Color],
  ]);

export default mono;
